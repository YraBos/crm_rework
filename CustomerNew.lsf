MODULE CustomerNew;

REQUIRE Customer, CustomerAttachment, Utils, Time;

calcInfo 'Данные сверки' = DATA LOCAL TEXT (Customer);
delimiter 'Разделитель' = DATA LOCAL STRING[10] () CHARWIDTH 10; 
clientType 'Тип клиента' = DATA STRING[50] (Customer) CHARWIDTH 50; 
inReport 'Отм.' = DATA LOCAL BOOLEAN (Customer);

onCalc 'Обновить' () {
    calcInfo(Customer c) <- '';
    FOR (Customer o IS Customer) AND isSubstring(info(o),delimiter()) DO {
        FOR iterate(INTEGER i, 2, wordCount(info(o),delimiter())) ORDER i DO {
            calcInfo(o) <- calcInfo(o) + getWord(getWord(info(o),delimiter(),i),'\n',1) + ';      ';
        }  
    }
}

// статический справочник отчетов
CLASS EnumNameReports 'Отчеты по сверке' {
//    p1 ' 1. Сверка по клиенту - тип SV', p2 ' 2. Cверка по ТО - тип S1', p3 ' 3. Cверка по ТСД - тип S2',
//    p4 ' 4. Сверка по ТО с СП - тип S3', p5 ' 5. Ежемесячная сверка - тип S1M', p6 ' 6. Сверка по месяцу N - тип S1N'
    p1 ' 1. Cверка по ТСД - тип S2', 
    p2 ' 2. Cверка по ТО - тип S1', p3 ' 3. Ежемесячная сверка - тип S1M', p4 ' 4. Сверка по месяцу N - тип S1N'
}

FORM listEnumNameReports ''
    OBJECTS ob = EnumNameReports
    PROPERTIES(ob) READONLY staticCaption 
    ORDERS staticCaption(ob)
; 

CLASS TempCustomerReports 'Временные отчеты по клиенту';
pi '' = DATA LOCAL INTEGER  (TempCustomerReports);
p1 '' = DATA LOCAL TEXT     (TempCustomerReports);
p2 '' = DATA LOCAL TEXT     (TempCustomerReports);
p3 '' = DATA LOCAL TEXT     (TempCustomerReports);
p4 '' = DATA LOCAL TEXT     (TempCustomerReports);
p5 '' = DATA LOCAL TEXT     (TempCustomerReports);
p6 '' = DATA LOCAL TEXT     (TempCustomerReports);

// заголовки отчета
date = DATA LOCAL DATE (); title = DATA LOCAL TEXT (); 

FORM repTempCustomerReports 'Печатная форма универсального отчета'
  PROPERTIES() date, title PANEL  
  OBJECTS o1 = TempCustomerReports
  PROPERTIES(o1) pi,p1,p2,p3,p4,p5,p6
  ORDERS pi(o1)   
;

newTempCustomerReports '' (INTEGER ind, TEXT c1,c2,c3,c4,c5,c6) {
    DELETE TempCustomerReports o1 WHERE o1 IS TempCustomerReports;
    NEW o2 = TempCustomerReports {
        pi(o2) <- ind; 
        p1(o2) <- c1;                   // клиента 
        p2(o2) <- c2; p3(o2) <- c3;     // дата, кол-во
        p4(o2) <- c4; p5(o2) <- c5;     // дата, кол-во
        p6(o2) <- c6;                   // примечание
    }
}

// 2. Cверка по ТО - тип S1  по отдельному клиенту
onRevise2 '' (INTEGER ind, TempCustomerReports oRep, Customer c, Attachment ox1, Attachment ox2, STRING cFDelimiter) {
    LOCAL frep = FILE(); 
    LOCAL ks1,ks2,iks1,iks2,nv = INTEGER ();
    LOCAL nob = INTEGER(); nob() <- 0;  
    LOCAL colA1,colB1,colC1,colD1,colB2,colD2,colG2 = BPSTRING[50] (INTEGER);
    LOCAL ctxt, c1 = TEXT();
    IMPORT XLS NOHEADER FROM file(ox1) AS FILE TO colA1=A,colB1=B,colC1=C,colD1=D;  // организация, унп, магазины, склады
    IMPORT XLS NOHEADER FROM file(ox2) AS FILE TO colB2=B,colD2=D,colG2=G;          // адрес, унп, продажи
    iks1() <- 0; iks2() <- 0;
    FOR imported(INTEGER i1) AND i1 > 0 ORDER i1 DO {
        colA1(i1) <- OVERRIDE colA1(i1),''; colB1(i1) <- OVERRIDE colB1(i1),''; colC1(i1) <- OVERRIDE colC1(i1),''; colD1(i1) <- OVERRIDE colD1(i1),''; 
        IF NOT (length(colA1(i1)) > 0 AND length(colB1(i1)) > 0) THEN BREAK;
        ks1() <- toInteger(colC1(i1)) + toInteger(colD1(i1)); iks1() <- iks1() + ks1();
        ctxt() <- '';
        IF cFDelimiter THEN {
            FOR iterate(INTEGER i, 2, wordCount(info(c),cFDelimiter)) ORDER i DO {
                c1() <- OVERRIDE getWord(getWord(info(c),cFDelimiter,i),'\n',1), '';
                c1() <- OVERRIDE getWord(c1(),'///',2), '';
                IF length(c1()) > 0 THEN p6(oRep) <- trim(c1());
            }    
        }
        NEW ob = TempCustomerReports {
            pi(ob) <- ind; p1(ob) <- '   ' + colA1(i1); ks2()  <- 0;                 // организация клиента 
            FOR imported(INTEGER i2) AND i2 > 0 ORDER i2 DO {
                ctxt() <- ctxt() + OVERRIDE colB2(i2),'' + '\n';   
                IF colB1(i1) = colD2(i2) THEN {
                    IF toInteger(OVERRIDE colG2(i2),'') > 0 THEN ks2() <- ks2() + 1;
                }
            }
            iks2() <- iks2() + ks2();
            p3(ob) <- toChar(ks1(),'9999'); p5(ob) <- toChar(ks2(),'9999');
        }   
    }
    p3(oRep) <- toChar(iks1(),'9999'); p5(oRep) <- toChar(iks2(),'9999');
}


// 3. сверка по ТСД, тип S2 по отдельному клиенту
onRevise3 '' (INTEGER ind, TempCustomerReports oRep, Customer c, Attachment ox1, Attachment ox2, STRING cFDelimiter) {
    LOCAL frep = FILE(); LOCAL c1 = TEXT();
    LOCAL value1,value2 = BPSTRING[50] (INTEGER);
    IMPORT XLS NOHEADER FROM file(ox1) AS FILE TO value1 = A;
    IMPORT XLS NOHEADER FROM file(ox2) AS FILE TO value2 = A;
    p3(oRep) <- value1(0); p5(oRep) <- value2(0);
    IF cFDelimiter THEN {
        FOR iterate(INTEGER i, 2, wordCount(info(c),cFDelimiter)) ORDER i DO {
            c1() <- OVERRIDE getWord(getWord(info(c),cFDelimiter,i),'\n',1), '';
            c1() <- OVERRIDE getWord(c1(),'///',2), '';
            IF length(c1()) > 0 THEN p6(oRep) <- trim(c1());
        }    
    }
}


// универсальный метод сверки
// тип отчета, заголовок отчета, док1, док2, значение атрибута в тип клиента, доп. разделитель
onRevise '' (INTEGER ntype, STRING cTitle,cRepName1,cRepName2,cFilter,cDelimiter) {
    LOCAL cmsg,c1 = TEXT (); 
    LOCAL ot1, ot2  = Attachment();
    LOCAL ind = INTEGER (); ind() <- 0;
    inReport(Customer c) <- NULL;
    FOR [FILTER customers.o](Customer c) DO inReport(c) <- TRUE; 
    FOR (Customer c IS Customer) AND isSubstring(clientType(c),cFilter) AND inReport(c) ORDER name(c) NEW ob = TempCustomerReports DO {
        p1(ob) <- name(c); ind() <- ind() + 1; pi(ob) <- ind();  
        ot1()  <- GROUP MAX Attachment a IF customer(a) = c AND name(type(a)) = cRepName1;
        ot2()  <- GROUP MAX Attachment a IF customer(a) = c AND name(type(a)) = cRepName2;
        IF ot1() THEN p2(ob) <- toDateDDMMYY(date(ot1()));
        IF ot2() THEN p4(ob) <- toDateDDMMYY(date(ot2()));
        IF ot1() AND ot2() THEN {
            IF ntype = 1 THEN ;
            ELSE IF ntype = 2 THEN onRevise2(ind(),ob,c,ot1(),ot2(),cDelimiter);
            ELSE IF ntype = 3 THEN onRevise3(ind(),ob,c,ot1(),ot2(),cDelimiter);
//            ELSE IF ntype = 4 THEN onRevise2(ind(),ob,c,ot1(),ot2(),cDelimiter);
        } ELSE {
            p6(ob) <- '* Отсутствуют данные для сверки';
        }
    }  
    date() <- currentDate(); title() <- cTitle;
    PRINT repTempCustomerReports XLS; //XLS;
}

FORM  input 'Ввод значения'
    OBJECTS o = (qmes = INTEGER) PANEL 
    PROPERTIES 'Введите номер месяца' = VALUE(qmes)
; 

// Обработка формы: меню с отчетамми
onCustomerReports 'Отчеты' (Customer c) {
    LOCAL enum  = EnumNameReports();
    LOCAL ps    = STRING[3] ();
    DIALOG listEnumNameReports OBJECTS ob INPUT DO { enum() <- ob; }
    IF NOT enum() THEN RETURN;
    ps() <- substr(staticCaption(enum()),1,3);  
    IF ps() = ' 1.' THEN {
            newTempCustomerReports(0,'название клиента','дата','количество лицензий','дата','количество ключей ТСД','примечание');
            onRevise(3,'Отчет по сверке выданных лицензий ТСД','Список лицензий ТСД','Список ключей LS Trade ТСД','S2','*#*');
    } 
    ELSE IF ps() = ' 2.' THEN {
            newTempCustomerReports(0,'название клиента\nорганизации','дата','количество лицензий','дата','количество объектов','примечание');
            onRevise(2,'Отчет по сверке торговых объектов','Список лицензий','Список объектов','S1','###');
    }
    ELSE IF ps() = ' 3.' THEN {
            newTempCustomerReports(0,'название клиента\nорганизации','дата','количество лицензий','дата','количество объектов','примечание');
            onRevise(2,'Ежемесячный отчет по сверке торговых объектов','Список лицензий','Список объектов','S1M','###');
    }    
    ELSE IF ps() = ' 4.' THEN {
            LOCAL nmes = INTEGER (); nmes() <- extractMonthNumber(currentDate()); 
            DIALOG input OBJECTS qmes = nmes() INPUT DO { nmes() <- qmes; }
            IF nmes() < 1 OR nmes() > 12 THEN MESSAGE 'Месяц сверки вне диапазона 1..12';
            ELSE {  
                newTempCustomerReports(0,'название клиента\nорганизации','дата','количество лицензий','дата','количество объектов','примечание');
                onRevise(2,'Отчет по сверке торговых объектов за ' + nmes() + ' месяц','Список лицензий','Список объектов','S1' + nmes(),'###');
            }    
    }    
}


EXTEND FORM customers
    PROPERTIES onCalc(), delimiter(), onCustomerReports(o) 
    PROPERTIES(o) READONLY clientType AFTER nameGroup(o)
    PROPERTIES(o) PANEL READONLY calcInfo
    EVENTS ON INIT {
        delimiter() <- '###';
    }  
;

EXTEND FORM customer
    PROPERTIES(o) clientType 
;

EXTEND FORM dialogCustomers
    PROPERTIES(o) READONLY clientType AFTER nameGroup(o)
;

DESIGN customers {
    PANEL {
        NEW cntInfo {
            type = CONTAINERV; 
            fill = 1;
            NEW cnt1 {
                fill = 1;
                MOVE PROPERTY (calcInfo(o));
            }
            NEW cnt10 {
                type = COLUMNS ; 
                NEW cnt2 {
                    caption = 'параметры сверки';
                    type = CONTAINERH ;
                    MOVE PROPERTY (delimiter()) {charHeight = 1;};
                    MOVE PROPERTY (onCalc());
                    MOVE PROPERTY (onCustomerReports(o));
                }
           }     
        }
    }
}
