MODULE ActRevise;
// акт сверки с клиентом

REQUIRE PaymentProcessDashboardNew, LegalEntityBy, DocWord;

// для формы
actReviseDS             'Начало периода'                = DATA LOCAL DATE ();
actReviseDE             'Конец периода'                 = DATA LOCAL DATE ();
actReviseCN             'Контракт'                      = DATA LOCAL Contract ();
actReviseDBSum          'Дебит на начало'               = DATA LOCAL NUMERIC[14,2] ();  // Остаток на начало, дебит, акты
actReviseCRSum          'Кредит на начало'              = DATA LOCAL NUMERIC[14,2] ();  // Остаток на начало, кредит, платежи
actReviseAllowSum       'Учитывать остатки'             = DATA LOCAL BOOLEAN ();
actReviseAllowScreen    'Выводить отчет на экран'       = DATA LOCAL BOOLEAN ();
actReviseAllowEMail     'Отправлять отчет по почте'     = DATA LOCAL BOOLEAN ();
actReviseAllowEdit      'Редактировать перед отправкой' = DATA LOCAL BOOLEAN ();

actReviseEMail          'Почтовый адрес клиента' (LegalEntity le)   = '' + email(customer(le));
actReviseNameType       'Тип договора' (Contract c) =  '' + nameType(c); 
 
// Заголовки и отд. свойства отчета
actReviseTitle1     '' = DATA LOCAL TEXT          ();    
actReviseTitle2     '' = DATA LOCAL TEXT          ();   

actReviseTitle3     '' = DATA LOCAL TEXT          ();   
actReviseTitle4     '' = DATA LOCAL TEXT          ();   
actReviseTitle5     '' = DATA LOCAL TEXT          ();   
actReviseTitle6     '' = DATA LOCAL TEXT          ();   
actReviseTitle7     '' = DATA LOCAL TEXT          ();  // сальдо на конец   
actReviseText       '' = DATA LOCAL STRING[100]   ();  // Связанные документы 
 
// временный класс строк класс отчета 
CLASS ActReviseTemp;
nid     'Индекс'    = DATA INTEGER          (ActReviseTemp); 
number  'Документ'  = DATA STRING[100]      (ActReviseTemp);
date    'Дата'      = DATA DATE             (ActReviseTemp);
note    'Примечание'= DATA TEXT             (ActReviseTemp);
debit   'Дебет'     = DATA NUMERIC[10,2]    (ActReviseTemp);
credit  'Кредит'    = DATA NUMERIC[10,2]    (ActReviseTemp);

onChange '' (BOOLEAN lMail) {
    IF lMail THEN {
        actReviseAllowScreen() <- NULL; 
        actReviseAllowEMail() <- NOT actReviseAllowEMail();
    } ELSE {
        actReviseAllowEMail() <- NULL;
        actReviseAllowEdit() <- NULL;
        actReviseAllowScreen() <- NOT actReviseAllowScreen();
    }
}

FORM actRevise 'Акт сверки'
    OBJECTS ds = DATE PANEL, de = DATE PANEL, 
            sDBSum = NUMERIC[14,2] PANEL, sCRSum = NUMERIC[14,2] PANEL, 
            le = LegalEntity PANEL, cn = Contract PANEL          
    PROPERTIES ds 'Дата с' = VALUE(ds), de 'по' = VALUE(de)
    PROPERTIES design1 = name(le) SELECTOR 
    PROPERTIES design2 = number(cn) SELECTOR
    PROPERTIES(cn) READONLY date, actReviseNameType
    PROPERTIES sDBSum 'Дебит' = VALUE(sDBSum), sCRSum 'Кредит' = VALUE(sCRSum), actReviseAllowSum() 
    PROPERTIES READONLY actReviseEMail(le)
    PROPERTIES actReviseAllowEdit()
    PROPERTIES actReviseAllowEMail()  ON CHANGE {onChange(TRUE);}
    PROPERTIES actReviseAllowScreen() ON CHANGE {onChange(NULL);}
    FILTERS legalEntity(cn) = le
    EVENTS ON INIT {
        SEEK actRevise.ds = toDateFormat('0101' + toChar(extractYear(currentDate()),'9999'), 'DDMMYYYY');
        SEEK actRevise.de = currentDate();
        SEEK actRevise.le = legalEntity(cn);
        SEEK actRevise.sDBSum = 0.00;
        SEEK actRevise.sCRSum = 0.00;
        actReviseAllowEMail() <- TRUE; 
        actReviseAllowEdit() <- TRUE;
    }
    EVENTS ON OK {
        actReviseDS() <- ds; actReviseDE() <- de; actReviseCN() <- cn; 
        actReviseDBSum() <- sDBSum;
        actReviseCRSum() <- sCRSum;
    }
;

DESIGN actRevise {
    TOOLBARLEFT {
        MOVE PROPERTY (actReviseAllowScreen()) FIRST {marginTop = 8;};
    }
    OBJECTS {
        NEW cntMain {
            NEW cntDate {
                caption = 'выбор период расчета';
                horizontal = TRUE;
                MOVE PROPERTY (ds);
                MOVE PROPERTY (de) {marginLeft = 10;};
            }
            NEW cntLE {
                caption = 'выбор организации';
                MOVE PROPERTY (design1) {charWidth = 50;};
            }
            NEW cntCNT {
                caption = 'выбор договора';
                NEW cnt1 {
                    NEW cnt11 {
                        horizontal = TRUE;
                        MOVE PROPERTY (design2);
                        MOVE PROPERTY (date(cn)) {marginLeft = 10;}; 
                        MOVE PROPERTY (actReviseNameType(cn)) {marginLeft = 10;}; 
                    } 
                    NEW cnt12 {
                        MOVE PROPERTY(actReviseEMail(le)); 
                        MOVE PROPERTY (actReviseAllowEMail());
                        MOVE PROPERTY (actReviseAllowEdit());
                    }
                }  
            }
            NEW cntSaldo {
                caption = 'Остатки на начало';
                horizontal = TRUE;
                MOVE PROPERTY (sDBSum) ;
                MOVE PROPERTY (sCRSum) {marginLeft = 10;};
                MOVE PROPERTY (actReviseAllowSum()) {marginLeft = 10;};
            }
        }
    }    
}

// печатная форма
FORM reportActRevise 'Печать Акта сверки'
    PROPERTIES() actReviseTitle1, actReviseTitle2, actReviseTitle3, actReviseTitle4, actReviseTitle5, actReviseTitle6, actReviseTitle7 PANEL 
    OBJECTS a = ActReviseTemp
    PROPERTIES(a) nid, date, number, note, debit, credit
    ORDERS nid(a), date(a)
;

// чистим совйства и временную таблицу
onActReviseCls 'Очистка свойств' () {
    DELETE ActReviseTemp a WHERE a IS ActReviseTemp; // чистим tmp таблицу
    actReviseCN() <- NULL;  
    actReviseTitle1() <- NULL; actReviseTitle2() <- NULL; actReviseTitle3() <- NULL; actReviseTitle4() <- NULL; 
    actReviseTitle5() <- NULL; actReviseTitle6() <- NULL; actReviseTitle7() <- NULL; 
}

toDateISO2 = FORMULA STRING[10] 'to_char(($1),\'YYYY_MM_DD\')';

// расчет акта для печатной формы
onActRevise 'Акт сверки' (Payment o) {
    onActReviseCls();
    DIALOG actRevise OBJECTS cn = contract(o);
    IF NOT actReviseCN() THEN RETURN;
    LOCAL sdS, sdE, skS, skE = NUMERIC[14,5] (); // обороты дебет начало-конец, кредит начало-конец
    IF actReviseAllowSum() THEN {
        sdS() <- actReviseDBSum();
        sdE() <- GROUP SUM sum(Act a) IF contract(a) = actReviseCN() AND date(a) >= actReviseDS() AND date(a) <= actReviseDE(); 
        sdE() <- sdS() + (OVERRIDE sdE(), 0.00);
    } ELSE {
        sdS() <- GROUP SUM sum(Act a) IF contract(a) = actReviseCN() AND date(a) <  actReviseDS(); 
        sdS() <- OVERRIDE sdS(), 0.00; 
        sdE() <- GROUP SUM sum(Act a) IF contract(a) = actReviseCN() AND date(a) <= actReviseDE(); 
        sdE() <- OVERRIDE sdE(), 0.00;
    }
    FOR (Act a IS Act) AND contract(a) = contract(actReviseCN()) AND (date(a) > actReviseDS() AND date(a) <= actReviseDE()) DO {
        NEW ob = ActReviseTemp {
            nid(ob)     <- 2;
            date(ob)    <- date(a);
            number(ob)  <- number(a);
            note(ob)    <- text(a);
            debit(ob)   <- round(sum(a),2);
        }
    }  
    IF actReviseAllowSum() THEN {
        skS() <- actReviseCRSum();
        skE() <- GROUP SUM sum(Payment p) IF contract(p) = actReviseCN() AND date(p) >= actReviseDS() AND date(p) <= actReviseDE(); 
        skE() <- skS() + (OVERRIDE skE(), 0.00);
    } ELSE {
        skS() <- GROUP SUM sum(Payment p) IF contract(p) = actReviseCN() AND date(p) <  actReviseDS();
        skS() <- OVERRIDE skS(), 0.00;
        skE() <- GROUP SUM sum(Payment p) IF contract(p) = actReviseCN() AND date(p) <= actReviseDE();
        skE() <- OVERRIDE skE(), 0.00;
    }
    FOR (Payment p IS Payment) AND contract(p) = contract(actReviseCN())  AND (date(p) > actReviseDS() AND date(p) <= actReviseDE()) DO {
        NEW ob = ActReviseTemp {
            nid(ob)     <- 2;
            date(ob)    <- date(p);
            number(ob)  <- OVERRIDE number(p),'б/н';
            note(ob)    <- note(p);
            credit(ob)  <- round(sum(p),2);         
        }
    }
    // сальдо и обороты
    NEW ob = ActReviseTemp {
       nid(ob)    <- 1;
       note(ob)   <- 'Сальдо на ' + toDateDDMMYYYY(actReviseDS()) + 'г., бел. рубли';
       IF      sdS() - skS() > 0 THEN debit(ob)  <- round(sdS() - skS(),2);
       ELSE IF sdS() - skS() < 0 THEN credit(ob) <- round(skS() - sdS(),2);
    }
    NEW ob = ActReviseTemp {
       nid(ob)    <- 3;
       note(ob)   <- 'Обороты за период \nc ' + toDateDDMMYYYY(actReviseDS()) + ' по ' + toDateDDMMYYYY(actReviseDE()) + 'г.';
       debit(ob)  <- IF sdE() - sdS() != 0 THEN round(sdE() - sdS(),2);
       credit(ob) <- IF skE() - skS() != 0 THEN round(skE() - skS(),2);
    }
    // заголовки и итоги
    LOCAL ole1, ole2 = LegalEntity ();
    LOCAL gbux, gdir = STRING ();
    gbux() <- 'Лангуева И.И.'; gdir() <- 'Донсков Е.С.'; 
    ole1() <- GROUP MAX (LegalEntity l) IF id(l) = '1'; // НТ ООО ЛюксСофт
    ole2() <- legalEntity(contract(actReviseCN()));     // Организация
    actReviseTitle1() <- OVERRIDE fullName(ole1()), name(ole1());
    actReviseTitle2() <- OVERRIDE fullName(ole2()), name(ole2());
    actReviseTitle3() <- 
        'взаимных расчетов за период с ' + toDateDDMMYYYY(actReviseDS()) + ' по ' + toDateDDMMYYYY(actReviseDE()) + 'г.\n' +
        'между ' + actReviseTitle1() + ' и ' + actReviseTitle2() + '\n' +
        'по договору № '   + number(contract(actReviseCN())) + ' от ' + toDateDDMMYYYY(date(contract(actReviseCN()))) + 'г.\n';
    actReviseTitle4() <- 
        '   Мы, нижеподписавшиеся, гл. бухгалтер ' + actReviseTitle1() + ' ' + gbux() + ' ' + 
        'с одной стороны, и ' + actReviseTitle2() + ' с другой стороны, составили настоящий акт сверки в том, ' + 
        'что состояние взаимных расчетов по данным учета следующее:\n';
    actReviseTitle5() <-
        (IF UNP(ole1()) THEN 'УНП: ' + UNP(ole1()) + '\n' ELSE '') +    
        (IF nameLegalAddress(ole1()) THEN nameLegalAddress(ole1()) + '\n' ELSE '') + '\n' +
        'директор      ______________________ (' + gdir() + ')\n\n' +
        'гл. бухгалтер ______________________ (' + gbux() + ')\n\n' + 
        '"____" _________________ ' + toChar(extractYear(actReviseDE()),'9999') + 'г.\n\n' + 
        'В случае невозврата акта сверки в течении 10 дней,\n' +
        'сальдо считается подтвержденным\n';
    actReviseTitle6() <-
        (IF UNP(ole2()) THEN 'УНП: ' + UNP(ole2()) + '\n' ELSE '') +    
        (IF nameLegalAddress(ole2()) THEN nameLegalAddress(ole2()) + '\n' ELSE '') + '\n' + 
        'руководитель  ______________________ (_______________)\n\n' + 
        'гл. бухгалтер ______________________ (_______________)\n\n' + 
        '"____" _________________ ' + toChar(extractYear(actReviseDE()),'9999') + 'г.\n';
    // задолженность на конец
    actReviseTitle7()   <- 'Задолженность ';  
    NEW ob = ActReviseTemp {
       nid(ob)    <- 4;
       note(ob) <- 'Сальдо исходящие, бел. рубли';
       IF sdE() - skE() > 0 THEN {
            debit(ob)  <- round(sdE() - skE(),2);
            actReviseTitle7() <- 
                'Задолженность ' + actReviseTitle2() + ' перед ' + actReviseTitle1() + ' составляет ' + trim(toChar(debit(ob),'9999999999.99')) + 
                ' (' + numSpelledCurrency(debit(ob), '00d', currency(actReviseCN())) + ')' + '\n';  
       } ELSE IF sdE() - skE() < 0 THEN {
            credit(ob) <- round(skE() - sdE(),2);
            actReviseTitle7() <- 
                'Задолженность ' + actReviseTitle1() + ' перед ' + actReviseTitle2() + ' составляет ' + trim(toChar(credit(ob),'9999999999.99')) +  
                ' (' + numSpelledCurrency(credit(ob), '00d', currency(actReviseCN())) + ')';  
       } ELSE actReviseTitle7() <- 'Задолженности нет'; 
    }
    // вывод (отправка на e-mail) отчета, actReviseCN() - ссылка на контракт
    IF actReviseAllowScreen() THEN PRINT reportActRevise;
    ELSE IF NOT actReviseAllowEMail() THEN PRINT reportActRevise XLS;
    ELSE IF     actReviseAllowEMail() AND NOT actReviseEMail(legalEntity(actReviseCN())) THEN MESSAGE 'Почтовый адрес не заполнен';
    ELSE IF     actReviseAllowEMail() AND     actReviseEMail(legalEntity(actReviseCN())) THEN { 
        LOCAL frep, frep2 = FILE(); LOCAL fname = STRING[255]();
        LOCAL ofrom = Customer();
        ofrom() <- GROUP MAX (Customer c) IF id(c) = '1';
        PRINT reportActRevise XLS TO frep;
        fname() <- 'АктСверки_' + actReviseTitle2() + '_' + toDateISO2(actReviseDE()); 
        open(frep(),fname());
        IF actReviseAllowEdit() THEN {
                ASK 'Переоткрыть Акт с учетом изменений?\n' + '------------------------------------------\n' + fname() DO {
                INPUT ff = FILE DO frep2() <- ff;
                IF frep2() THEN frep() <- frep2(); 
                ELSE MESSAGE 'Версия Акта сверки к отправке\n' + 'без учета сделанных изменений';
            }
        }
        ASK 'Вы действительно хотите отправить\n' + 
            'Акт сверки на e-mail клиента?\n' +
            '----------------------------------------\n' +    
            'отправитель: ' + name(ofrom()) + ', ' + email(ofrom()) + '\n' + 
            'получатель : ' + name(customer(actReviseCN())) + ', ' + actReviseEMail(legalEntity(actReviseCN()))  DO {
            EMAIL 
                FROM email(ofrom())
                SUBJECT 'Акт сверки'
                TO  actReviseEMail(legalEntity(actReviseCN()))
                BODY 'Высылаю во вложении Акт сверки\n' + actReviseTitle3()
                ATTACH frep(); 
            MESSAGE 'Акт сверки отправлен';   
        } 
    }   
    CANCEL; 
} TOOLBAR ;


EXTEND FORM paymentProcessDasboard
    PROPERTIES onActRevise(p) TOOLBAR 
;
