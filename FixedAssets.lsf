MODULE FixedAssets;

REQUIRE Employee, EVAT, FixedAssetsDirs, Utils, Time;


CLASS FixedAssets 'Основные средства';
TABLE fixedAssets(FixedAssets);

CLASS FixedAssetsLog 'Логирование ОС';
TABLE fixedAssetsLog(FixedAssetsLog);

// общие свойства для обеих таблиц (через одну) - эти свойства актуальны для логирования
// можно было использовате мета, но особого смысла нет, пространство не экономиться, работа усложняется
inventoryNumber     'Инвентарный номер'                 = DATA STRING[10]       (FixedAssets); 
inventoryNumber     'Инвентарный номер'                 = DATA STRING[10]       (FixedAssetsLog); 
passport            'Признак сверки'                    = DATA STRING[10]       (FixedAssets);  
passport            'Признак сверки'                    = DATA STRING[10]       (FixedAssetsLog);  
factoryNumer        'Заводской номер'                   = DATA STRING[20]       (FixedAssets);
factoryNumer        'Заводской номер'                   = DATA STRING[20]       (FixedAssetsLog);
releaseDate         'Дата выпуска'                      = DATA DATE             (FixedAssets);
releaseDate         'Дата выпуска'                      = DATA DATE             (FixedAssetsLog);
inputDate           'Дата ввода в эксп.'                = DATA DATE             (FixedAssets); 
inputDate           'Дата ввода в эксп.'                = DATA DATE             (FixedAssetsLog); 
inputDoc            'Документ ввода в эксп.'            = DATA STRING[20]       (FixedAssets); 
inputDoc            'Документ ввода в эксп.'            = DATA STRING[20]       (FixedAssetsLog); 
dateOfDisposal      'Дата бух.выбытия'                  = DATA DATE             (FixedAssets); 
dateOfDisposal      'Дата бух.выбытия'                  = DATA DATE             (FixedAssetsLog); 
docOfDisposal       'Документ выбытия'                  = DATA STRING[20]       (FixedAssets); 
docOfDisposal       'Документ выбытия'                  = DATA STRING[20]       (FixedAssetsLog); 
dateFactDisposal    'Дата ф/выбытия'                    = DATA DATE             (FixedAssets); 
dateFactDisposal    'Дата ф/выбытия'                    = DATA DATE             (FixedAssetsLog); 
provider            'Поставщик'                         = DATA STRING[40]       (FixedAssets);  
provider            'Поставщик'                         = DATA STRING[40]       (FixedAssetsLog);  
name                'Наименование ОС'                   = DATA ISTRING[100]     (FixedAssets); 
name                'Наименование ОС'                   = DATA ISTRING[100]     (FixedAssetsLog); 
quantity            'Количество'                        = DATA NUMERIC[10,3]    (FixedAssets); 
quantity            'Количество'                        = DATA NUMERIC[10,3]    (FixedAssetsLog); 
primaryBalanceValue 'Первичная б/стоимость'             = DATA NUMERIC[15,2]    (FixedAssets); 
primaryBalanceValue 'Первичная б/стоимость'             = DATA NUMERIC[15,2]    (FixedAssetsLog); 
primaryBalanceUsd   'Первичная б/стоимость USD'         = DATA NUMERIC[15,2]    (FixedAssets); 
primaryBalanceUsd   'Первичная б/стоимость USD'         = DATA NUMERIC[15,2]    (FixedAssetsLog); 
currentBalanceValue 'Текущая б/стоимость'               = DATA NUMERIC[15,2]    (FixedAssets); 
currentBalanceValue 'Текущая б/стоимость'               = DATA NUMERIC[15,2]    (FixedAssetsLog); 
sumWear             'Сумма износа'                      = DATA NUMERIC[15,2]    (FixedAssets);
sumWear             'Сумма износа'                      = DATA NUMERIC[15,2]    (FixedAssetsLog);
depreciationEndDate 'Самортизировано'                   = DATA DATE             (FixedAssets);
depreciationEndDate 'Самортизировано'                   = DATA DATE             (FixedAssetsLog);
note                'Примечание'                        = DATA TEXT             (FixedAssets); 
note                'Примечание'                        = DATA TEXT             (FixedAssetsLog); 
other               'Информация'                        = DATA TEXT             (FixedAssets); 
other               'Информация'                        = DATA TEXT             (FixedAssetsLog); 

// ОС - дополнительные свойства
image               'Фото'                              = DATA IMAGEFILE        (FixedAssets);
fmol                '* ФИО_МОЛ'                         = DATA STRING[100]      (FixedAssets); // потом удалить 
// локальное логирование, см. также FixedAssetsLog
userName            'Кто создал'                        = DATA BPSTRING[100]    (FixedAssets);                  
userDate            'Дата создания'                     = DATA DATE             (FixedAssets); 
userTime            'Время создания'                    = DATA TIME             (FixedAssets); 
changeName          'Кто изменил'                       = DATA BPSTRING[100]    (FixedAssets);                  
changeDate          'Дата изменения'                    = DATA DATE             (FixedAssets); 
changeTime          'Время изменения'                   = DATA TIME             (FixedAssets); 

// справочник ед. измерения
listUOM = DATA DirUOM(FixedAssets);
UOM 'Ед. изм.' = name(listUOM(FixedAssets o)); 
// классификатор
listClassifier = DATA DirClassifier(FixedAssets);
classifier 'Классификатор' (FixedAssets o) = name(listClassifier(o)) CHARWIDTH 20;
// место хранения
listStorage = DATA DirStorage (FixedAssets);
storage 'Место хранения' (FixedAssets o) = name(listStorage(o)); 
// вид объекта
listTypeObjects = DATA DirTypeObjects (FixedAssets);
typeObjects 'Вид объекта' (FixedAssets o) = name(listTypeObjects(o)); 
// ФИО МОЛ
listFullName = DATA Employee (FixedAssets);
fullName 'ФИО МОЛ' (FixedAssets o) = name(listFullName(o));

// дополнительные поля класса логирования
date                'Дата'                              = DATA DATE             (FixedAssetsLog);
userName            'Исполнитель'                       = DATA STRING           (FixedAssetsLog);
operName            'Операция'                          = DATA STRING[30]       (FixedAssetsLog);
status              'Статус записи'                     = DATA INTEGER          (FixedAssetsLog);
UOM                 'Ед. изм.'                          = DATA STRING[40]       (FixedAssetsLog);
classifier          'Классификатор'                     = DATA STRING[40]       (FixedAssetsLog);
storage             'Место хранения'                    = DATA STRING[40]       (FixedAssetsLog);
typeObjects         'Вид объекта'                       = DATA STRING[40]       (FixedAssetsLog);
fullName            'ФИО МОЛ'                           = DATA STRING[100]      (FixedAssetsLog);

colorStatus '' (FixedAssetsLog o) = 
    IF status(o) = 1 THEN RGB(204,255,255) 
    ELSE IF status(o) = 3 THEN RGB(245,216,214) ELSE RGB(255,255,255); 

FORM viewFixedAssetsLog 'Журнал логирования ОС'
    OBJECTS o = FixedAssetsLog LAST
    PROPERTIES(o) GRID BACKGROUND colorStatus(o) READONLY date, operName, userName
    PROPERTIES(o) GRID BACKGROUND colorStatus(o) READONLY inventoryNumber,passport,inputDoc,inputDate,
                  name,fullName,docOfDisposal,dateOfDisposal,dateFactDisposal,
                  classifier,storage,provider,primaryBalanceValue,currentBalanceValue,primaryBalanceUsd,
                  UOM,quantity,factoryNumer 
    OBJECTS p = FixedAssetsLog
    PROPERTIES(p) PANEL READONLY other, note
    FILTERS p = o              
//    PROPERTIES(o) DELETE // для отладки
;  

onSaveLog 'Запись данных в лог' (FixedAssets fa, BOOLEAN last, STRING[30] oname, INTEGER nstat) {
    NEW o = FixedAssetsLog {
        date(o)                 <- currentDate();
        userName(o)             <- OVERRIDE shortName(currentUser()), login(currentUser());
        operName(o)             <- oname;
        status(o)               <- nstat;
        inventoryNumber(o)      <- IF last THEN PREV(inventoryNumber(fa)) ELSE inventoryNumber(fa);
        passport(o)             <- IF last THEN PREV(passport(fa)) ELSE passport(fa);
        inputDoc(o)             <- IF last THEN PREV(inputDoc(fa)) ELSE inputDoc(fa);
        inputDate(o)            <- IF last THEN PREV(inputDate(fa)) ELSE inputDate(fa);
        name(o)                 <- IF last THEN PREV(name(fa)) ELSE name(fa);
        fullName(o)             <- IF last THEN PREV(fullName(fa)) ELSE fullName(fa);
        docOfDisposal(o)        <- IF last THEN PREV(docOfDisposal(fa)) ELSE docOfDisposal(fa);
        dateOfDisposal(o)       <- IF last THEN PREV(dateOfDisposal(fa)) ELSE dateOfDisposal(fa);
        dateFactDisposal(o)     <- IF last THEN PREV(dateFactDisposal(fa)) ELSE dateFactDisposal(fa);
        classifier(o)           <- IF last THEN PREV(classifier(fa)) ELSE classifier(fa);
        storage(o)              <- IF last THEN PREV(storage(fa)) ELSE storage(fa);
        provider(o)             <- IF last THEN PREV(provider(fa)) ELSE provider(fa);
        primaryBalanceValue(o)  <- IF last THEN PREV(primaryBalanceValue(fa)) ELSE primaryBalanceValue(fa);
        currentBalanceValue(o)  <- IF last THEN PREV(currentBalanceValue(fa)) ELSE currentBalanceValue(fa);
        primaryBalanceUsd(o)    <- IF last THEN PREV(primaryBalanceUsd(fa)) ELSE primaryBalanceUsd(fa);
        UOM(o)                  <- IF last THEN PREV(UOM(fa)) ELSE UOM(fa);
        quantity(o)             <- IF last THEN PREV(quantity(fa)) ELSE quantity(fa);
        factoryNumer(o)         <- IF last THEN PREV(factoryNumer(fa)) ELSE factoryNumer(fa);
        note(o)                 <- IF last THEN PREV(note(fa)) ELSE note(fa);
        other(o)                <- IF last THEN PREV(other(fa)) ELSE other(fa);
    }   
}

// событие: ввод нового значения
WHEN SET (FixedAssets fa IS FixedAssets) DO {
        userName(fa) <- OVERRIDE shortName(currentUser()), login(currentUser());
        userDate(fa) <- currentDate();
        userTime(fa) <- currentTime();
}

// событие: изменение значений
WHEN NOT DROPPED(FixedAssets fa IS FixedAssets) AND NOT SET(fa IS FixedAssets) AND 
     (  CHANGED(inventoryNumber(fa)) OR CHANGED(inputDoc(fa)) OR CHANGED(inputDate(fa)) 
     OR CHANGED(name(fa)) OR CHANGED(fullName(fa)) OR CHANGED(docOfDisposal(fa)) OR CHANGED(dateOfDisposal(fa))
     OR CHANGED(dateFactDisposal(fa)) OR CHANGED(classifier(fa)) OR CHANGED(storage(fa)) OR CHANGED(typeObjects(fa)) 
     OR CHANGED(provider(fa)) OR CHANGED(primaryBalanceValue(fa)) OR CHANGED(currentBalanceValue(fa))
     OR CHANGED(primaryBalanceUsd(fa)) OR CHANGED(UOM(fa)) OR CHANGED(quantity(fa)) 
     OR CHANGED(factoryNumer(fa)) OR CHANGED(image(fa)) OR CHANGED(note(fa)) OR CHANGED(other(fa)) 
     OR CHANGED(passport(fa)) ) 
   DO {
        changeName(fa) <- OVERRIDE shortName(currentUser()), login(currentUser());
        changeDate(fa) <- currentDate();
        changeTime(fa) <- currentTime();
        onSaveLog(fa, TRUE, 'Изменение, было',1);
        onSaveLog(fa, NULL, 'Изменение, стало',2);
}

// событие: удаление значений
WHEN DROPPED(FixedAssets fa IS FixedAssets) DO {
        onSaveLog(fa, TRUE, 'Удалено, было',3);
} 

// показать фото
viewFoto 'Фото' (FixedAssets fa) {
    IF image(fa) THEN
        open(image(fa));
    ELSE
        MESSAGE 'Нет изображения';   
}

// загрузка фото
loadFoto '+ Фото' (FixedAssets fa) {
    INPUT img = IMAGEFILE DO {
        image(fa) <- img;
        APPLY; 
    } ELSE 
        MESSAGE 'Действие отменено';
}

// удалить фото  
delFoto 'X Фото' (FixedAssets fa) {
    ASK 'Вы хотите очистить изображение?' DO {
        image(fa) <- NULL;
        APPLY; 
    } 
}

// ----- ФИЛЬТРЫ на форме -----
filterYearInputDate     'Год ввода в эксп.'     = DATA LOCAL INTEGER() CHARWIDTH 5; 
filterYearOfDisposal    'Год выбытия'           = DATA LOCAL INTEGER() CHARWIDTH 5;
filterFactYearDisposal  'Год ф/выбытия'         = DATA LOCAL INTEGER() CHARWIDTH 5;

filterEmployee                                  = DATA LOCAL Employee();
nameFilterEmployee      'ФИО МОЛ' () = name(filterEmployee()) CHARWIDTH 40;
filterStorage                                   = DATA LOCAL DirStorage();
nameFilterStorage       'Место хранения' () = name(filterStorage()) CHARWIDTH 40;

// журнал ОС, поля как в ст. картотеке для АВ
FORM viewFixedAssets 'Журнал основных средств'  
    OBJECTS dc = DirClassifier       // GRID классификатор
    PROPERTIES(dc) READONLY name 
    ORDERS name(dc)
    
    OBJECTS fa = FixedAssets       // GRID журнал ОС  
    GRID PROPERTIES(fa) READONLY 
        inventoryNumber,passport,inputDoc,inputDate,name,fullName,fmol,docOfDisposal,dateOfDisposal,dateFactDisposal,
        classifier,storage,provider,primaryBalanceValue,currentBalanceValue,primaryBalanceUsd,
        UOM,quantity,factoryNumer,userName,userDate,changeName,changeDate 
    ORDERS name(fa)    
    PROPERTIES(fa) NEWSESSION NEW, EDIT, DELETE
    PROPERTIES(fa) viewFoto SHOWIF image(fa) 
    PROPERTIES(fa) loadFoto
    PROPERTIES(fa) delFoto  SHOWIF image(fa) 
    FILTERS IF NOT trim(name(dc)) = '!ВСЕ' THEN name(listClassifier(fa)) = name(dc) ELSE TRUE   // Упр. жур. ОС от классификатора 

    // типа информационого табло
    OBJECTS ft1 = FixedAssets
    PANEL PROPERTIES(ft1) READONLY note, other
    FILTERS fa=ft1 // ОС + табло

    PROPERTIES() nameFilterEmployee, filterYearInputDate, filterYearOfDisposal, filterFactYearDisposal, nameFilterStorage
    FILTERS IF filterEmployee() THEN fullName(fa) = nameFilterEmployee() ELSE TRUE
    FILTERS IF filterYearInputDate() > 0 THEN extractYear(inputDate(fa)) = filterYearInputDate() ELSE TRUE
    FILTERS IF filterYearOfDisposal() > 0 THEN extractYear(dateOfDisposal(fa)) = filterYearOfDisposal() ELSE TRUE
    FILTERS IF filterFactYearDisposal() > 0 THEN extractYear(dateFactDisposal(fa)) = filterFactYearDisposal() ELSE TRUE
    FILTERS IF filterStorage() THEN storage(fa)  = nameFilterStorage() ELSE TRUE
;

DESIGN viewFixedAssets {
    OBJECTS {
        NEW cntFlt {
            type = CONTAINERH;
            caption = 'Фильтры';
            MOVE PROPERTY(nameFilterEmployee());
            MOVE PROPERTY(filterYearInputDate());
            MOVE PROPERTY(filterYearOfDisposal());
            MOVE PROPERTY(filterFactYearDisposal());            
            MOVE PROPERTY(nameFilterStorage());            
        }
        MOVE BOX(ft1) {
            type = CONTAINERV;
            MOVE PROPERTY(other(ft1)) {background=#F4FFF4;}; 
            MOVE PROPERTY(note(ft1)) {background=#EEF7F7;fontSize=9;};
        }
        NEW cnt1 {
            type = CONTAINERH ; 
            type = SPLITH;  
            fill = 1;
            NEW cnt2 {
                type = CONTAINERV;
                fill = 1;
                MOVE BOX(dc) {
                    TOOLBARSYSTEM(dc) { 
                        showGroupChange = FALSE;
                        showGroup = FALSE;
                        showCountQuantity = FALSE;
                        showCalculateSum = FALSE;
                        showPrintGroup = FALSE;
                        showPrintGroupXls = FALSE;
                        showSettings = FALSE;
                    }    
                };
            } 
            MOVE BOX(fa) {
                fill=8; 
                defaultComponent = TRUE;
            };
        }    
    }    
}

//дизай формы логирования
DESIGN viewFixedAssetsLog {
    PANEL {
        MOVE BOX(p); 
        BOX(p) {
            type = CONTAINERV;
            MOVE PROPERTY(other(p)) {background=#F4FFF4;}; 
            MOVE PROPERTY(note(p)) {background=#EEF7F7;};
        }
    }
}


// форма редактирования ОС
FORM editFixedAssets 'Журнал основных средств'
    OBJECTS fa = FixedAssets PANEL
    PROPERTIES(fa)  
        inventoryNumber, passport, factoryNumer, releaseDate, inputDate, inputDoc, 
        dateOfDisposal, docOfDisposal, typeObjects, provider, fullName, 
        name, UOM, quantity, primaryBalanceValue, primaryBalanceUsd, currentBalanceValue,
        sumWear, depreciationEndDate, classifier, storage, note, other, dateFactDisposal
    PROPERTIES(fa) READONLY 
        userName, userDate, userTime, changeName, changeDate, changeTime  
    EDIT FixedAssets OBJECT fa       
;

DESIGN editFixedAssets {
    OBJECTS {
        NEW cntA {
            type = CONTAINERH; 
            caption = 'Характеристика ОС';
            NEW cnt1a {
                fill = 1;
                MOVE PROPERTY(name(fa));
                MOVE PROPERTY(UOM(fa)) {background = #CEFFE7;}
                MOVE PROPERTY(inventoryNumber(fa));
                MOVE PROPERTY(inputDate(fa));
                MOVE PROPERTY(inputDoc(fa));
                MOVE PROPERTY(quantity(fa));
                MOVE PROPERTY(primaryBalanceUsd(fa));
                MOVE PROPERTY(sumWear(fa));
                MOVE PROPERTY(dateOfDisposal(fa));
                MOVE PROPERTY(docOfDisposal(fa));
                MOVE PROPERTY(dateFactDisposal(fa));
            }
            NEW cnt2a {
                fill = 1;
                MOVE PROPERTY(depreciationEndDate(fa));
                MOVE PROPERTY(fullName(fa)) {background = #CEFFE7;} 
                MOVE PROPERTY(passport(fa));
                MOVE PROPERTY(typeObjects(fa)) {background = #CEFFE7;}
                MOVE PROPERTY(classifier(fa)) {background = #CEFFE7;};
                MOVE PROPERTY(primaryBalanceValue(fa));
                MOVE PROPERTY(currentBalanceValue(fa));
                MOVE PROPERTY(releaseDate(fa));
                MOVE PROPERTY(provider(fa));
                MOVE PROPERTY(factoryNumer(fa));
                MOVE PROPERTY(storage(fa)) {background = #CEFFE7;};
            }
        }
        NEW cntB {
            type = CONTAINERV;
            caption = 'Примечания';
            fill = 1;
            MOVE PROPERTY(other(fa)) {background=#F4FFF4;}; 
            MOVE PROPERTY(note(fa)) {background=#EEF7F7;fontSize=9;};
   }
        NEW cntC {
            type = CONTAINERH; 
            NEW cnt3 {
                caption = 'Создал данные';
                MOVE PROPERTY(userName(fa)) {background = #D5D5FF;}            
                MOVE PROPERTY(userDate(fa)) {background = #D5D5FF;}            
                MOVE PROPERTY(userTime(fa)) {background = #D5D5FF;}            
            }
            NEW cnt4 {
                caption = 'Последние изменения';
                MOVE PROPERTY(changeName(fa)) {background = #D5D5FF;}            
                MOVE PROPERTY(changeDate(fa)) {background = #D5D5FF;}            
                MOVE PROPERTY(changeTime(fa)) {background = #D5D5FF;}            
            }
        }
    }    
}

// новая запись на основании предыдущей
// не все поля копируем, иначе это будет приводить к ошибкам
copyRec '+ Копия' (FixedAssets m) {
    NEWSESSION {
        NEW cfa = FixedAssets {
            name(cfa)               <- name(m);
            inputDate(cfa)          <- inputDate(m);
            inputDoc(cfa)           <- inputDoc(m);
            provider(cfa)           <- provider(m);
            note(cfa)               <- note(m);
            listUOM(cfa)            <- listUOM(m);
            listTypeObjects(cfa)    <- listTypeObjects(m);
            listClassifier(cfa)     <- listClassifier(m);
            listStorage(cfa)        <- listStorage(m);
            SHOW editFixedAssets OBJECTS fa=cfa DOCKED WAIT;
            IF changeName(cfa) THEN SEEK FIRST viewFixedAssets.fa OBJECTS fa = cfa;
        }
    } 
} TOOLBAR; 

// открепить МОЛ
unPin 'Открепить' (FixedAssets fa) {
    IF fullName(fa) THEN {
        ASK 'Вы хотите открепить МОЛ?' DO {
            fmol(fa) <- fullName(fa);
            listFullName(fa) <- NULL;
            APPLY; 
        }
    } ELSE MESSAGE 'МОЛ не определено';     
} TOOLBAR; 


EXTEND FORM viewFixedAssets
    PROPERTIES(fa) copyRec, unPin;


NAVIGATOR {
    NEW FOLDER FixedAssetsFolder 'ОС' WINDOW toolbar AFTER EVATFolder {
        NEW viewFixedAssets;
        NEW viewFixedAssetsLog;
        NEW FOLDER DirsFolder 'Доп. справочники' {
            NEW listDirStorage;
            NEW listDirUOM;
            NEW listDirClassifier;
            NEW listDirTypeObjects;       
        } 
    }
}


filterInStock           'В наличии'             = DATA LOCAL BOOLEAN ();
filterFree              'Свободные'             = DATA LOCAL BOOLEAN ();

EXTEND FORM viewFixedAssets
    PROPERTIES filterInStock(), filterFree()
    FILTERS IF filterInStock()  THEN (NOT storage(fa) OR storage(fa) != 'Выбывшие') ELSE TRUE
    FILTERS IF filterFree()     THEN (NOT storage(fa) OR storage(fa) != 'Выбывшие') AND (NOT fullName(fa) OR fullName(fa) = 'Свободный') ELSE TRUE 
    EVENTS ON INIT {
        filterInStock() <- TRUE; 
    }
;

DESIGN viewFixedAssets {
    GROUP (,fa) {
        cntFlt {
            MOVE PROPERTY (filterInStock()) {marginLeft = 10; }
            MOVE PROPERTY (filterFree()) {marginLeft = 10;}
        }
    }
}