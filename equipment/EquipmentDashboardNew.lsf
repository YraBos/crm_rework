MODULE EquipmentDashboardNew;

// можно подключить модуль для загрузки для отладки серийных номеров EquimpentImportSerial (скопировать из H:\Fusion_Arc\Old_Added\equipment\)
REQUIRE CustomerNew, EquipmentDashboard, ContractSubject, CustomerAttachment, TempClassReports, Time;

// --- задач - 13003, 12704
numberChange 'Замена номера' = DATA ISTRING[250] (EquipmentSerial) CHARWIDTH 15;
dateChange 'Дата замены' = DATA DATE (EquipmentSerial);
note 'Примечание' = DATA STRING[200] (EquipmentSerial);

FORM editNumberChange 'Редактирование замен'
    OBJECTS n = EquipmentSerial PANEL  
    PROPERTIES(n) number, numberChange, dateChange, note 
    EDIT EquipmentSerial OBJECT n
    EVENTS ON INIT {
        IF NOT numberChange(n) THEN {
            numberChange(n) <- number(n);
            number(n) <- NULL; 
        }
        dateChange(n) <- currentDate(); 
    }
; 

DESIGN editNumberChange {
   BOX(n) {
        MOVE PROPERTY (number(n)) {caption = 'Новый номер';} 
        MOVE PROPERTY (dateChange(n));
        MOVE PROPERTY (numberChange(n)) {caption = 'Старый номер';}
        MOVE PROPERTY (note(n)); 
   } 
}

createdDate 'Дата' (EquipmentSerial s) = createdDate(equipment(s)); // дата создания ключа
nameLegalEntity 'Название организации' (EquipmentSerial s) = OVERRIDE ' ' + name(legalEntity(contract(equipment(s)))), '* Не связанные с договором';
sumCustomer 'Итого по клиенту' (Customer c, SubjectType t) = GROUP SUM 1 IF subjectType(equipment(EquipmentSerial s)) = t BY customer(equipment(s));  
nameAgrContract 'Название соглашения или контракта' (EquipmentSerial s) =
            OVERRIDE description(agreement(equipment(s))), description(contract(equipment(s))), '';
 
FORM repOutSerials 'Данные'
    OBJECTS c = Customer PROPERTIES name(c) PANEL
    OBJECTS t = SubjectType PROPERTIES name(t), sumCustomer(c, t) PANEL
    OBJECTS s = EquipmentSerial PROPERTIES(s) nameLegalEntity, createdDate, number, dateChange, numberChange, note, nameAgrContract
    FILTERS customer(equipment(s)) = c, subjectType(equipment(s)) = t
    ORDERS nameLegalEntity(s),createdDate(s) 
;

// Импортируемые данные
CLASS XlsDataLoad 'Импорт данных' { 
    p1 ' 1. Список выданных ключей ТСД (из отчета)', 
    p2 ' 2. Список работающих ТСД (из XLS, посл. подключения)', 
    p3 ' 3. Список всех подключений ТСД (из XLS, все подключения)'
}

FORM viewXlsDataLoad 'Импорт данных'
    OBJECTS ob = XlsDataLoad
    PROPERTIES(ob) READONLY staticCaption
    ORDERS staticCaption(ob) 
;

DESIGN viewXlsDataLoad { PROPERTY (staticCaption(ob)) {caption = 'Название отчета';}}

// Импорт данных из разных источников
onXlsDataLoad 'Импорт данных' (Equipment e,SubjectType t) {
    IF NOT filterCustomer() THEN { MESSAGE 'Определите клиента'; RETURN ; } 
    LOCAL ov  = XlsDataLoad();
    LOCAL ps  = STRING[3] ();
    DIALOG viewXlsDataLoad OBJECTS ob INPUT DO { ov() <- ob; }
    IF NOT ov() THEN RETURN;
    LOCAL frep = FILE(); 
    LOCAL ot = Attachment();
    LOCAL at = AttachmentType();
    LOCAL cNameType = STRING ();
    ps() <- substr(staticCaption(ov()),1,3);
    // -------------------------------------------------------------------------------
    IF ps() = ' 1.' THEN {
        IF NOT name(t) = 'LST ТСД' THEN { // просто отобразим отчет и выйдем 
            PRINT repOutSerials OBJECTS c = customer(e),t = t XLS; RETURN; 
        } 
        PRINT repOutSerials OBJECTS c = customer(e),t = t XLS TO frep; 
        open(frep());
        cNameType() <- 'Список выданных ключей ТСД';
    } 
    // -------------------------------------------------------------------------------
    ELSE IF ps() = ' 2.' THEN {
        INPUT fx = FILE DO frep() <- fx;
        IF NOT frep() THEN { MESSAGE 'Выполнение операции отменено'; RETURN; }    
        cNameType() <- 'Список работающих ТСД';
    }
    // -------------------------------------------------------------------------------
    ELSE IF ps() = ' 3.' THEN {
        INPUT fx = FILE DO frep() <- fx;
        IF NOT frep() THEN { MESSAGE 'Выполнение операции отменено'; RETURN; }    
        cNameType() <- 'Список всех подключений ТСД';
    } ELSE {
        MESSAGE 'Неизвестный отчет';
        RETURN;
    }
    // -------------------------------------------------------------------------------
    // ищем тип предложения, если не нашли то создаем новое предложение в справочнике
    at() <- GROUP MAX AttachmentType o IF name(o) = cNameType();
    IF NOT at() THEN NEW o = AttachmentType {
        at() <- o; 
        name(o) <- ISTRING[100](cNameType());    
    }
    // ищем для клиента тип предложения, если нет, то создаем новую запись, иначе замещаем данные
    ot() <- GROUP MAX Attachment a IF customer(a) = customer(e) AND type(a) = at();
    IF NOT ot() THEN NEW a = Attachment {
        ot() <- a; 
        customer(a) <- customer(e); 
        type(a) <- at();
    }
    date(ot()) <- currentDate(); 
    file(ot()) <- frep();
    apply();
    MESSAGE 'Данные импортированы';   
}

number 'Номер'          = DATA STRING[250]  (TempClassReports);
dLast 'Дата пос. исп.'  = DATA DATE         (TempClassReports);
dCreate 'Дата выдачи'     = DATA DATE       (TempClassReports);
found 'Найден'          = DATA STRING[20]   (TempClassReports);

// заголовки отчета
title1 = DATA LOCAL TEXT (); title2 = DATA LOCAL TEXT (); title3 = DATA LOCAL TEXT ();  title4 = DATA LOCAL TEXT (); 

FORM repTempEQUReport 'Сверка торговых объектов'
  PROPERTIES() title1, title2, title3, title4 PANEL  
  OBJECTS o1 = TempClassReports
  PROPERTIES(o1) pi, number, dLast, dCreate, found
  ORDERS pi(o1)   
;

// R14583, сверка серийных номеров по договору
onReviseTSD 'Сверка раб. ТСД (упр.)' (Equipment e) {
    newTempClassReports();
    IF NOT filterCustomer() THEN { MESSAGE 'Определите клиента'; RETURN; }
    LOCAL ot = Attachment();
    LOCAL colC = STRING[250] (INTEGER);
    LOCAL colE = DATE (INTEGER);
    LOCAL ctxt = STRING[250] ();
    LOCAL cnt, cnt1, cnt2 = INTEGER(); cnt() <- 0; cnt1() <- 0; cnt2() <- 0; 
    LOCAL oe = Equipment(); LOCAL os = EquipmentSerial ();
    ot() <- GROUP MAX Attachment a IF customer(a) = customer(e) AND name(type(a)) = 'Список работающих ТСД';
    IF NOT ot() THEN { 
        MESSAGE 'Не найден документ:\nСписок работающих ТСД'; 
        RETURN; 
    }
    IMPORT XLS NOHEADER FROM file(ot()) AS FILE TO colC = C, colE = E;
    FOR imported(INTEGER i) AND i > 1 ORDER i DO {
        colC(i) <- trim(OVERRIDE colC(i),'');
        IF length(colC(i)) > 0 THEN NEW ob = TempClassReports {
            cnt()  <- cnt() + 1;
            number(ob) <- colC(i); 
            dLast(ob) <- colE(i);
            os() <- GROUP MAX (EquipmentSerial s) IF number(s) = number(ob);
            IF os() THEN {
                pi(ob) <- 2;
                cnt2() <- cnt2() + 1;
                found(ob) <- 'ок';
                oe() <- GROUP MAX (Equipment e1) IF e1 = equipment(os());
                IF oe() THEN dCreate(ob) <- createdDate(oe());
            } ELSE {
                pi(ob) <- 1;
                cnt1() <- cnt1() + 1;
                found(ob) <- 'не найден';
            }
        }
    }  
//  SHOW repTempEQUReport; // Отладка
    title1() <- 'Отчет по сверке работающих ТСД';
    title2() <- 'по клиенту: ' + name(customer(e));
    title3() <- 'Обработано всего: ' + trim(toChar(cnt(),'999999')) + ', ' + 
                'найдено в БД: ' + trim(toChar(cnt2(),'999999')) + ', не найдено: ' + trim(toChar(cnt1(),'999999')); 
    title4() <- 'Отчет формируется относительно содержимого документа "Список работающих ТСД". ' + 
                'Серийные номера (sn) из документа последовательно сверяются с sn в базе данных по клиенту.\n' +
                'Если sn найден, то заполняется дата выдачи и значение колонки "выдан" - ok, иначе пишется: не найден';
    PRINT repTempEQUReport XLS; // XLS
}

onReviseS2 'Сверка лицензий ТСД' (Equipment e) {
    IF NOT filterCustomer() THEN { MESSAGE 'Определите клиента';  RETURN; }
    newTempClassReports();    
    title() <- 'Отчет по сверке выданных лицензий ТСД';
    date() <- currentDate();
    FOR (Customer c IS Customer) DO inReport(c) <- NULL;
    FOR (Customer c IS Customer) AND c=customer(e) DO inReport(c) <- TRUE;
    onRevise(3,'Список лицензий ТСД','Список выданных ключей ТСД','S2',NULL);
    PRINT repReviseTSD XLS; // XLS;
}

fltNumber 'Фильтр по номеру' = DATA LOCAL STRING[50] (); 
// вычисление ID equipment от значения ключа оборудования
exprEquipment '' (ISTRING[250] num) = GROUP MAX equipment(EquipmentSerial n1) IF upper(number(n1)) = upper(num);
// сброс выражения фильтра
clsExprEquipment 'X' () {fltNumber() <- NULL;}

// генерация лицензий по фильтру на форме
inMark 'Отм.' = DATA LOCAL BOOLEAN (Equipment);

onGenLic 'Создать LIC (по клиенту)' (Equipment ob) {
    LOCAL ctxt = TEXT(); 
    IF NOT filterCustomer() THEN {
        MESSAGE 'Определите клиента'; RETURN ;
    }
    inMark(Equipment e) <- NULL;
    FOR [FILTER equipmentDashboard.e](Equipment e) DO inMark(e) <- TRUE;
    FOR (Equipment e IS Equipment) AND customer(e) = customer(ob) AND inMark(e) DO {
        generateLicense(e);
        fileToString(file(e));
        ctxt() <- (IF NOT ctxt() THEN '' ELSE ctxt() + '\n') + resultString(); 
    }
    stringToFile(ctxt(),'UTF-8', '');
    open(resultFile(),'lic');
}

// Алфавитно-цифровой QR код = 4296 байт, лицензии по 32 байта (всегда)
CLASS TempLicQR 'QR коды';
qrtext 'QR код' = DATA STRING[3200] (TempLicQR); // на 100 лицензий, 3200
snum 'ID ТСД' = DATA STRING (TempLicQR);
cnt 'Количество' = DATA INTEGER (TempLicQR);

equTitle1 = DATA LOCAL STRING ();
equTitle2 = DATA LOCAL STRING ();
equTitle3 = DATA LOCAL STRING ();
equTitle4 = DATA LOCAL TEXT ();

FORM prnTempLicQR 'Печатаная форма'
    PROPERTIES () equTitle1, equTitle2, equTitle3, equTitle4 
    OBJECTS t = TempLicQR
    PROPERTIES(t) READONLY cnt, snum, qrtext 
;

onPrintQR 'Печать QR (по текущему)' (Equipment e) {
    IF NOT file(e) THEN { MESSAGE 'Сгенерите лицензии\nи повторите операцию'; RETURN; }
    LOCAL cqrtext  = STRING[3200] (); cqrtext() <- '';
    LOCAL csnum, cid = STRING (); csnum() <- '';
    LOCAL ctxt = TEXT ();
    LOCAL ncnt = INTEGER (); ncnt() <- 0;
    DELETE TempLicQR  o1 WHERE o1 IS TempLicQR;
    fileToString(file(e));
    ctxt() <- replace(resultString(),'\n','');
    ctxt() <- replace(ctxt(),'\r','');
    FOR iterate(INTEGER i,1,length(ctxt())/32) DO {
        cid() <- substr(ctxt(),32 * (i-1) + 1,32);
        IF ncnt() + 1 < 101 THEN {
            cqrtext() <- cqrtext() + cid();
            IF ncnt() > 0 THEN csnum() <- csnum() + ', ';
            csnum() <- csnum() + cid();  
            ncnt() <- ncnt() + 1;    
        } ELSE {
            NEW o = TempLicQR { qrtext(o) <- cqrtext(); cnt(o) <- ncnt(); snum(o) <- csnum(); }
            cqrtext()   <- cid();
            csnum()     <- cid();
            ncnt()      <- 1;       
        }
    }
    NEW o = TempLicQR { qrtext(o) <- cqrtext(); cnt(o) <- ncnt(); snum(o) <- csnum(); }
    equTitle1() <- 'Список лицензий';
    equTitle2() <- 'Клиент: ' + nameCustomer(e);
    equTitle3() <- 'Дата: ' + toDateDDMMYYYY(createdDate(e)) + ', всего номеров: ' + trim(toChar(quantitySerial(e),'99999'));
    // equTitle4() <- GROUP CONCAT number(EquipmentSerial s) IF equipment(s) = e, ', ' ORDER s; // CONCAT не тянет, если много (> 170)
    // по этому через FOR
    FOR (EquipmentSerial s IS EquipmentSerial) AND equipment(s) = e ORDER s DO 
        IF NOT equTitle4() THEN equTitle4() <- number(s); ELSE equTitle4() <- equTitle4() + ', ' + number(s);  
    PRINT prnTempLicQR PDF;
}

// только для отладки, см ниже на форме equipmentDashboard, PROPERTIES onLoadLic(e) 
onLoadLic 'Загрузить LIC в БД' (Equipment e) { INPUT f = FILE DO { file(e) <- f; APPLY; } } TOOLBAR ;

EXTEND FORM equipmentDashboard
    PROPERTIES(n) READONLY dateChange, numberChange, note
    PROPERTIES(n) NEWSESSION EDIT
    PROPERTIES onXlsDataLoad(e,t), onReviseTSD(e), onReviseS2(e), onGenLic(e), onPrintQR(e)
//    PROPERTIES onLoadLic(e) // только для отладки
    PROPERTIES fltNumber(), clsExprEquipment()
    FILTERS IF fltNumber() THEN e = exprEquipment(fltNumber()) ELSE TRUE
    FILTERS IF fltNumber() THEN upper(number(n)) = upper(fltNumber()) ELSE TRUE
;


DESIGN equipmentDashboard {
    head {
        NEW mhead {
            horizontal = FALSE ;
            NEW head1 {
                horizontal = TRUE ;
                MOVE PROPERTY (name(t));
                MOVE PROPERTY (nameFilterCustomer());
                MOVE PROPERTY (nameFilterContract(t));
                MOVE PROPERTY (fltNumber());
                MOVE PROPERTY (clsExprEquipment());
            }
            NEW head2 {
                horizontal = TRUE ;
                MOVE PROPERTY (quantitySerial(t)) {background=#E1E1E1;};
                MOVE PROPERTY (onXlsDataLoad(e,t));
                MOVE PROPERTY (onGenLic(e));
                MOVE PROPERTY (onPrintQR(e));
                MOVE PROPERTY (onReviseTSD(e));
                MOVE PROPERTY (onReviseS2(e));
            }
        }
    }
}


// удаление серийных номеров во вкладке Серийные номера, RM 14861
onDeleteSerial 'Удалить СН' (EquipmentSerial o) {
    ASK 'Вы действительно хотите удалить SN?' DO {
        LOCAL icnt = INTEGER();         
        DELETE o;
        icnt() <- GROUP SUM 1 IF equipment(EquipmentSerial es) = equipment(o); 
        dataQuantitySerial(Equipment e) <- icnt() WHERE e = equipment(o);
        APPLY;
    }        
}


EXTEND FORM equipmentDashboard
    PROPERTIES(es) TOOLBAR onDeleteSerial
;