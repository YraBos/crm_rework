MODULE EquipmentReportQRcode;

REQUIRE EquipmentDashboard, EquipmentReports, Utils;

// Алфавитно-цифровой QR код = 4296 байт, лицензии по 32 байта (всегда)
CLASS TempLicQR 'QR коды';
qrtext 'QR код' = DATA STRING[3200] (TempLicQR); // на 100 лицензий, 3200
snum 'ID ТСД' = DATA STRING (TempLicQR);
cnt 'Количество' = DATA INTEGER (TempLicQR);

FORM prnTempLicQR 'Печатаная форма'
    PROPERTIES () equTitle1, equTitle2, equTitle3, equTitle4 
    OBJECTS t = TempLicQR
    PROPERTIES(t) READONLY cnt, snum, qrtext 
    REPORT 'EquipmentDashboardNew_prnTempLicQR.jrxml'
;

CLASS TypeRepQR 'Тип документа QR' {
    p1 '1. Импорт в PDF', p2 '2. Импорт в DOCX', p3 '3. Импорт в XLSX', p4 '4. Вывод на экран'
}

typeRepQR 'ID Тип документа' = DATA LOCAL TypeRepQR;
captionTypeRepQR 'Тип документа' = staticCaption(typeRepQR());
qLicense 'Количество лицензий в QR коде' = DATA LOCAL INTEGER CHARWIDTH 3;

FORM setRepQR 'Дополнительные реквизиты'
    PROPERTIES () qLicense, captionTypeRepQR
;

DESIGN setRepQR { 
    GROUP () { 
        NEW cnt {
            horizontal = FALSE;
            MOVE PROPERTY (qLicense());
            MOVE PROPERTY (captionTypeRepQR());
        }     
    }
}

onPrintQR 'Печать QR (по текущему)' (Equipment e) {
    IF NOT file(e) THEN { MESSAGE 'Сгенерите лицензии\nи повторите операцию'; RETURN; }
    LOCAL cqrtext  = STRING[3200] (); cqrtext() <- '';
    LOCAL csnum, cid = STRING (); csnum() <- '';
    LOCAL ctxt = TEXT ();
    LOCAL ncnt = INTEGER (); ncnt() <- 0;
        typeRepQR() <- GROUP MAX (TypeRepQR t) IF staticCaption(t) = '1. Импорт в PDF';
        qLicense() <- 50;
        SHOW setRepQR;
    DELETE TempLicQR o1 WHERE o1 IS TempLicQR;
    fileToString(file(e));
    ctxt() <- replace(resultString(),'\n','');
    ctxt() <- replace(ctxt(),'\r','');
    FOR iterate(INTEGER i,1,length(ctxt())/32) DO {
        cid() <- substr(ctxt(),32 * (i-1) + 1,32);
        IF ncnt() + 1 < qLicense() + 1 THEN { // было 101, тогда слишком плотно
            cqrtext() <- cqrtext() + cid();
            IF ncnt() > 0 THEN csnum() <- csnum() + ', ';
            csnum() <- csnum() + cid();  
            ncnt() <- ncnt() + 1;    
        } ELSE {
            NEW o = TempLicQR { qrtext(o) <- cqrtext(); cnt(o) <- ncnt(); snum(o) <- csnum(); }
            cqrtext()   <- cid();
            csnum()     <- cid();
            ncnt()      <- 1;       
        }
    }
    NEW o = TempLicQR { qrtext(o) <- cqrtext(); cnt(o) <- ncnt(); snum(o) <- csnum(); }
    equTitle1() <- 'Список лицензий';
    equTitle2() <- IF nameLegalEntityContract(e) THEN 'Организация: ' + nameLegalEntityContract(e) ELSE 'Клиент: ' + (OVERRIDE nameCustomer(e),'');
    equTitle3() <- 'Дата: ' + toDateDDMMYYYY(createdDate(e)) + ', всего номеров: ' + trim(toChar(quantitySerial(e),'99999'));
    equTitle4() <- NULL;
    // equTitle4() <- GROUP CONCAT number(EquipmentSerial s) IF equipment(s) = e, ', ' ORDER s; // CONCAT не тянет, если много (> 170)
    // по этому через FOR
    FOR (EquipmentSerial s IS EquipmentSerial) AND equipment(s) = e ORDER s DO 
        IF NOT equTitle4() THEN equTitle4() <- number(s); ELSE equTitle4() <- equTitle4() + ', ' + number(s);
    IF left(captionTypeRepQR(),2) = '1.' THEN PRINT prnTempLicQR PDF;
    ELSE IF left(captionTypeRepQR(),2) = '2.' THEN PRINT prnTempLicQR DOCX;
    ELSE IF left(captionTypeRepQR(),2) = '3.' THEN PRINT prnTempLicQR XLSX;
    ELSE PRINT prnTempLicQR;
}

