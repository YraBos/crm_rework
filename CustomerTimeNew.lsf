MODULE CustomerTimeNew;

REQUIRE CustomerTime, TimeEntryCustomer, Utils, IssueNew, Time;
NAMESPACE Project;

discountHours 'Скидка' = DATA NUMERIC[7,2] (TimeEntry);

// вытягиваем поля на форму, name, number, hours, namePoject исключаем, они уже есть
//numberIssue2            '* НЗ *'                (TimeEntry t) = number(issue(t)); // отладка
descriptionStringIssue  'Описание'              (TimeEntry t) = descriptionString(issue(t));
commentStringIssue      'Комментарий'           (TimeEntry t) = commentsString(t);
dateToIssue             'Завершена'             (TimeEntry t) = dateTo(issue(t));
dateTimeCreatedIssue    'Создана'               (TimeEntry t) = toDate(dateTimeCreated(issue(t)));
dateTimeUpdatedIssue    'Обновлена'             (TimeEntry t) = toDate(dateTimeUpdated(issue(t)));
dateFromIssue           'Начата'                (TimeEntry t) = dateFrom(issue(t)); 
doneRatioIssue          'Готовность'            (TimeEntry t) = doneRatio(issue(t)); 
estimatedHoursIssue     'Оценка трудозатрат'    (TimeEntry t) = estimatedHours(issue(t)); 
nameAuthorIssue         'Автор'                 (TimeEntry t) = nameAuthor(issue(t));
nameAssignedToIssue     'Назначена'             (TimeEntry t) = nameAssignedTo(issue(t)); 
nameTrackerIssue        'Трекер'                (TimeEntry t) = nameTracker(issue(t)); 
numberAgreementIssue    'Номер соглашения'      (TimeEntry t) = numberAgreement(issue(t)); 
nameAgreementIssue      'Соглашение'            (TimeEntry t) = nameAgreement(issue(t));
numberContractIssue     'Номер договора'        (TimeEntry t) = numberContract(issue(t));
nameContractIssue       'Договор'               (TimeEntry t) = nameContract(issue(t));
nameStatusIssue         'Статус'                (TimeEntry t) = nameStatus(issue(t));
priorityNameIssue       'Приоритет'             (TimeEntry t) = priorityName(issue(t));
separateContractIssue   'ОД'                    (TimeEntry t) = separateContract(issue(t)) CHARWIDTH 4; 

inReport    ''      = DATA LOCAL BOOLEAN (TimeEntry);
in          'Отм.'  = DATA LOCAL BOOLEAN (TimeEntry) CHARWIDTH 5;

noError 'Без ошибок' = DATA LOCAL BOOLEAN ();
noSeparateContract 'Без отд. договора' = DATA LOCAL BOOLEAN ();
filterTracker  = DATA LOCAL Tracker();
nameFilterTracker 'Трекер' () = name(filterTracker()); 

// сокращаем формулы в расчетах, отчетах, дизайне
hoursResult '' (TimeEntry t) = hours(t) - IF discountHours(t) THEN discountHours(t) ELSE 0.00;

// !!! Копипастим из TimeEntryCustomer, иначе ни как
hoursFilterProjectExt 'Трудозатраты' (Customer c, DATE  df, DATE dt) = 
      GROUP SUM hoursResult(TimeEntry t)
        IF date(t) >= df AND date(t) <= dt 
        AND (customer(t) == c OR customer(project(t)) == c OR customer(issue(t)) == c)
        AND (project(t) == filterProject(c) OR project(issue(t)) == filterProject(c) OR NOT filterProject(c)) 
        AND (agreement(issue(t)) == filterAgreement() OR NOT filterAgreement()) 
        AND (contract(issue(t)) == filterContract() OR NOT filterContract())
        AND ((withoutAgreements() AND NOT agreement(issue(t))) OR NOT withoutAgreements() OR filterAgreement() OR filterContract())
    // --- новые условия
        AND (nameTrackerIssue(t) = nameFilterTracker() OR NOT nameFilterTracker())
        AND (IF noError() THEN NOT nameTrackerIssue(t) = 'Ошибка' ELSE TRUE)  
        AND (IF noSeparateContract() THEN NOT separateContractIssue(t) ELSE TRUE)
        AND inReport(t)
;
    
// !!! Копипастим из TimeEntryCustomer, иначе ни как
FORM customerReportExt 'Расширенный отчёт для клиента'
    OBJECTS cd = (c = Customer, df = DATE, dt = DATE) PANEL SUBREPORT 
    PROPERTIES 'Клиент' = name(c) SELECTOR, 'Дата с' = VALUE (df), 'Дата по' =  VALUE (dt), hoursFilterProjectExt(c, df, dt), withoutAgreements(), 
                nameFilterProject(c), nameFilterAgreement(), nameFilterContract()
    
    OBJECTS i = Issue
    PROPERTIES (i) READONLY number, dateTimeCreated, estimatedHours, nameAuthor, nameAssignedTo, nameTracker, nameStatus, name
    PROPERTIES hours(i, df, dt) AFTER estimatedHours(i)
    ORDERS number(i)
    FILTERS customer(i) == c, timeEntries(i, df, dt),
            (withoutAgreements() AND NOT agreement(i)) OR NOT withoutAgreements() OR filterAgreement() OR filterContract(),
            project(i) == filterProject(c) OR NOT filterProject(c),
            agreement(i) == filterAgreement() OR NOT filterAgreement(),
            contract(i) == filterContract() OR NOT filterContract()
    
    OBJECTS t = TimeEntry
    PROPERTIES (t) READONLY nameEmployee, date, hours, nameActivity, commentsString, hoursResult
    ORDERS date(t)
    FILTERS issue(t) == i, date(t) >= df AND date(t) <= dt AND inReport(t)
    FILTERS IF nameFilterTracker() THEN nameTrackerIssue(t) = nameFilterTracker() ELSE TRUE 
    FILTERS IF noError() THEN NOT nameTrackerIssue(t) = 'Ошибка' ELSE TRUE 
    FILTERS IF noSeparateContract() THEN NOT separateContractIssue(t) ELSE TRUE
    
    OBJECTS te = TimeEntry
    PROPERTIES (te) READONLY nameEmployee, date, hours, nameActivity, commentsString
    ORDERS date(te)
    FILTERS (customer(te) == c OR customer(project(te)) == c) AND NOT issue(te), date(te) >= df AND date(te) <= dt, 
            project(te) == filterProject(c) OR NOT filterProject(c), te IS TimeEntry AND NOT filterAgreement() AND NOT filterContract()
            AND inReport(te)
    FILTERS IF nameFilterTracker() THEN nameTrackerIssue(te) = nameFilterTracker() ELSE TRUE 
    FILTERS IF noError() THEN NOT nameTrackerIssue(te) = 'Ошибка' ELSE TRUE 
    FILTERS IF noSeparateContract() THEN NOT separateContractIssue(te) ELSE TRUE
;

printCustomerReportExt 'Расш. отчет' (Customer c, DATE df, DATE dt) {
    filterAgreement()       <- NULL;
    filterContract()        <- NULL;
    inReport(TimeEntry t)   <- NULL;
    FOR [FILTER customerTimeDashboard.t](TimeEntry t2) DO inReport(t2) <- TRUE;
    IF NOT hoursFilterProjectExt(c,df,dt) THEN {
        MESSAGE 'Нет данных для отображения\n' + 'Попробуйте изменить условие фильра';
        RETURN;
    }
//    MESSAGE hoursFilterProjectExt(c,df,dt); // итог для отладки, чтобы не формировать отчет
    PRINT customerReportExt OBJECTS c = c, df = df, dt = dt XLS; //XLS;
}


// --- отмеченное время ---
EXTEND FORM customerTimeDashboard
    PROPERTIES(t)   in BEFORE id(t)
//    PROPERTIES(t)   inReport BEFORE in(t) // отладка, см. выше
    PROPERTIES(t)   discountHours AFTER hours(t)
    PROPERTIES(t)   READONLY nameStatusIssue, descriptionStringIssue, dateToIssue, dateTimeCreatedIssue, dateTimeUpdatedIssue, dateFromIssue,  
                    doneRatioIssue, estimatedHoursIssue, nameAuthorIssue, nameAssignedToIssue, nameTrackerIssue,  
                    numberAgreementIssue, nameAgreementIssue, numberContractIssue, nameContractIssue,
                    priorityNameIssue, separateContractIssue
    PROPERTIES      printCustomerReportExt(c, df, dt),  // отчет 
                    nameFilterTracker(), noError(), noSeparateContract()
    PROPERTIES(t)   PANEL commentStringIssue
    EVENTS ON INIT {
        noError() <- TRUE; 
        noSeparateContract() <- TRUE;
    }                       
;

DESIGN customerTimeDashboard {
    timeEntries {
        report {
            PROPERTY(printCustomerReport(c, df, dt)) {caption = 'Отчет';};
        }
        NEW reportExt AFTER report {
            caption = 'Дополнительные параметры';
            type = CONTAINERH; 
//            type = COLUMNS;  // если не будет входить линейка фильтров, то переходим на COLUMNS вместо CONTAINERH
//            columns = 8;
            MOVE PROPERTY (printCustomerReportExt(c, df, dt));
            MOVE PROPERTY (nameFilterTracker());
            MOVE PROPERTY (noError());
            MOVE PROPERTY (noSeparateContract()); 
        }
        NEW tabloTimeEntries AFTER reportExt {
            type = CONTAINERV;
            MOVE PROPERTY (commentStringIssue(t)) {background=#EEF7F7; charWidth = 150;};
        }
        GRID(t) {
            MOVE PROPERTY (in(t)) {marginLeft = 20;marginRight = 20;}
            PROPERTY (numberIssue(t)) ;
            PROPERTY (nameEmployee(t)) {caption = 'Исполнитель';}
        } 
    }
}

// --- задачи ---
discountHours 'Скидка' (Issue i) = GROUP SUM discountHours(TimeEntry t) BY issue(t);

// часы для выставления клиенту: если присутствует оцененное время, то считаем от него, иначе по фактическому 
calcHours 'Итого' (Issue i) = 
         IF estimatedHours(i) THEN estimatedHours(i) - IF discountHours(i) THEN discountHours(i) ELSE 0.00 ELSE 
         IF hours(i) THEN hours(i) - IF discountHours(i) THEN discountHours(i) ELSE 0.00; 
descriptionStringTablo 'Описание' (Issue is) = descriptionString(is);

// маркер для отчета, что считали по оценненному времени
marker 'Маркер' (Issue i) = IF estimatedHours(i) THEN '"' ELSE ' ';  

inReportIssue '' = DATA LOCAL BOOLEAN (Issue);
noErrorIssue 'Без ошибок' = DATA LOCAL BOOLEAN ();
noSeparateContractIssue 'Без отд. договора' = DATA LOCAL BOOLEAN ();
noAgreement 'Без соглашения'  = DATA LOCAL BOOLEAN ();
lenDescription 'Ширина' = DATA LOCAL INTEGER ();
addDescription '+ Описание' = DATA LOCAL BOOLEAN ();
descriptionLimit 'LEFT' (Issue is) = left(descriptionString(is),lenDescription()); // что бы облегчить жизнь в JR

// печатная форма
FORM printIssueRepExt ''
    OBJECTS cd = (c = Customer, df = DATE, dt = DATE, st = IssueStatus) PANEL
    PROPERTIES 'Клиент' = name(c) SELECTOR, 
        'Дата с' = VALUE (df), 'Дата по' =  VALUE (dt), 'Статус' = name(st), 'Длина' = lenDescription(), '+' = addDescription() 
    OBJECTS is = Issue
    PROPERTIES(is) number, dateTimeCreated, dateTimeUpdated, name, calcHours, 
                   nameAuthor, nameAssignedTo, descriptionString, descriptionLimit, marker
    FILTERS customer(is) == c, status(is) == st
    FILTERS IF noErrorIssue() THEN NOT nameTracker(is) = 'Ошибка' ELSE TRUE    // без ошибок
    FILTERS IF noSeparateContractIssue() THEN NOT separateContract(is) ELSE TRUE            // отдельный договор
    FILTERS IF noAgreement() THEN                                                           // без соглашения 
        (IF NOT numberAgreement(is) THEN TRUE) ELSE (IF numberAgreement(is) THEN TRUE)
    FILTERS inReportIssue(is)
    ORDERS number(is)     
;

onPrintIssueExt 'Печать' (Customer c, DATE df, DATE dt, IssueStatus st) {
    inReportIssue(is) <- NULL;
    FOR [FILTER customerTimeDashboard.is](Issue i) DO inReportIssue(i) <- TRUE; 
    PRINT printIssueRepExt OBJECTS c = c, df = df, dt = dt, st = st XLS;
}

openER 'Redmine' (TimeEntry t) {
    open(issue(t));   
};

EXTEND FORM customerTimeDashboard
    PROPERTIES(is) READONLY discountHours, nameStatus, priorityName, separateContract, calcHours
    PROPERTIES(is) READONLY PANEL descriptionStringTablo
    PROPERTIES  noErrorIssue(), noSeparateContractIssue(), noAgreement(), addDescription(), lenDescription() 
    PROPERTIES  onPrintIssueExt(c, df, dt, st), openER(t)
    EVENTS ON INIT {
        noErrorIssue() <- TRUE; 
        noSeparateContractIssue() <- TRUE;
        noAgreement() <- TRUE;
        lenDescription() <- 100;
        addDescription() <- NULL;
    }                       
;

DESIGN customerTimeDashboard {
    issues {
        NEW filterIssue AFTER docReport {
            type = CONTAINERH;
            caption = 'Отчет по задачам';
            MOVE PROPERTY (onPrintIssueExt(c, df, dt, st));
            MOVE PROPERTY (noErrorIssue()) {marginLeft = 10;};
            MOVE PROPERTY (noSeparateContractIssue()) {marginLeft = 10;};
            MOVE PROPERTY (noAgreement()) {marginLeft = 10;};
            MOVE PROPERTY (addDescription()) {marginLeft = 10;};
            MOVE PROPERTY (lenDescription()) {marginLeft = 10;};
        }
        NEW tabloIssues AFTER filterIssue {
            type = CONTAINERV;
            MOVE PROPERTY (descriptionStringTablo(is)) {background=#EEF7F7; charWidth = 150;}; 
        }
    }
    BOX(is) {
        MOVE PROPERTY (hours(is)) {caption = 'Часы';}
        MOVE PROPERTY (number(is)) {caption = 'Номер задачи';}
        MOVE PROPERTY (name(is)) {caption = 'Задача';}
        MOVE PROPERTY (dateTo(is)) {caption = 'Завершена'; charWidth = 8;}
        MOVE PROPERTY (dateTimeCreated(is)) {caption = 'Создана'; charWidth = 8; pattern = 'dd.MM.yy';}
        MOVE PROPERTY (dateTimeUpdated(is)) {caption = 'Обновлена'; pattern = 'dd.MM.yy'; charWidth = 10; pattern = 'dd.MM.yy';}
        MOVE PROPERTY (dateFrom(is)) {caption = 'Начата'; charWidth = 8;}
    }
    TOOLBARRIGHT(is) {
        MOVE PROPERTY (open(is)) {caption = 'Redmine';}; 
    }
    TOOLBARRIGHT(t) {
        MOVE PROPERTY (openER(t));
    } 
}
