MODULE CustomerTimeNew;

REQUIRE CustomerTime, TimeEntryCustomer, Utils, IssueNew, CustomerNew, CustomerTimeEdit, Time, RevisionHelp;
NAMESPACE Project;

    
// вытягиваем поля на форму, name, number, hours, namePoject исключаем, они уже есть
//numberIssue2            '* НЗ *'                (TimeEntry t) = number(issue(t)); // отладка
descriptionStringIssue  'Описание'              (TimeEntry t) = descriptionString(issue(t));
commentStringIssue      'Комментарий'           (TimeEntry t) = commentsString(t);
dateToIssue             'Завершена'             (TimeEntry t) = dateTo(issue(t));
dateTimeCreatedIssue    'Создана'               (TimeEntry t) = toDate(dateTimeCreated(issue(t)));
dateTimeUpdatedIssue    'Обновлена'             (TimeEntry t) = toDate(dateTimeUpdated(issue(t)));
dateFromIssue           'Начата'                (TimeEntry t) = dateFrom(issue(t)); 
doneRatioIssue          'Готовность'            (TimeEntry t) = doneRatio(issue(t)); 
estimatedHoursIssue     'Оценка трудозатрат'    (TimeEntry t) = estimatedHours(issue(t)); 
nameAuthorIssue         'Автор'                 (TimeEntry t) = nameAuthor(issue(t));
nameAssignedToIssue     'Назначена'             (TimeEntry t) = nameAssignedTo(issue(t)); 
nameTrackerIssue        'Трекер'                (TimeEntry t) = nameTracker(issue(t)); 
numberAgreementIssue    'Номер соглашения'      (TimeEntry t) = numberAgreement(issue(t)); 
nameAgreementIssue      'Соглашение'            (TimeEntry t) = nameAgreement(issue(t));
numberContractIssue     'Номер договора'        (TimeEntry t) = numberContract(issue(t));
nameContractIssue       'Договор'               (TimeEntry t) = nameContract(issue(t));
nameStatusIssue         'Статус'                (TimeEntry t) = nameStatus(issue(t));
priorityNameIssue       'Приоритет'             (TimeEntry t) = priorityName(issue(t));
separateContractIssue   'ОД'                    (TimeEntry t) = separateContract(issue(t)) CHARWIDTH 4; 

inReport    ''      = DATA LOCAL BOOLEAN (TimeEntry);
in          'Отм.'  = DATA LOCAL BOOLEAN (TimeEntry) CHARWIDTH 5;

noError 'Без ошибок' = DATA LOCAL BOOLEAN ();
noSeparateContract 'Без отд. договора' = DATA LOCAL BOOLEAN ();
filterTracker  = DATA LOCAL Tracker();
nameFilterTracker 'Трекер' () = name(filterTracker()); 
noIssueNumber 'Без задачи' = DATA LOCAL BOOLEAN ();

// сокращаем формулы в расчетах, отчетах, дизайне
hoursResult '' (TimeEntry t) = hours(t) - IF discountHours(t) THEN discountHours(t) ELSE 0.00;

chkFilters '' (TimeEntry t) = 
    (nameTrackerIssue(t) = nameFilterTracker() OR NOT nameFilterTracker()) AND  
    (IF noError() THEN NOT nameTrackerIssue(t) = 'Ошибка' ELSE TRUE) AND 
    (IF noSeparateContract() THEN NOT separateContractIssue(t) ELSE TRUE) AND 
    (IF noIssueNumber() THEN NOT numberIssue(t) ELSE TRUE);
    
// !!! Копипастим из TimeEntryCustomer, иначе ни как
hoursFilterProjectExt 'Трудозатраты' (Customer c, DATE  df, DATE dt) = 
      GROUP SUM hoursResult(TimeEntry t)
        IF date(t) >= df AND date(t) <= dt 
        AND (customer(t) == c OR customer(project(t)) == c OR customer(issue(t)) == c)
        AND (project(t) == filterProject(c) OR project(issue(t)) == filterProject(c) OR NOT filterProject(c)) 
        AND (agreement(issue(t)) == filterAgreement() OR NOT filterAgreement()) 
        AND (contract(issue(t)) == filterContract() OR NOT filterContract())
        AND ((withoutAgreements() AND NOT agreement(issue(t))) OR NOT withoutAgreements() OR filterAgreement() OR filterContract())
    // --- новые условия
        AND chkFilters(t)
        AND inReport(t)
;
    
// !!! Копипастим из TimeEntryCustomer, иначе ни как
FORM customerReportExt 'Расширенный отчёт для клиента'
    OBJECTS cd = (c = Customer, df = DATE, dt = DATE) PANEL SUBREPORT 
    PROPERTIES 'Клиент' = name(c) SELECTOR, 'Дата с' = VALUE (df), 'Дата по' =  VALUE (dt), hoursFilterProjectExt(c, df, dt), withoutAgreements(), 
                nameFilterProject(c), nameFilterAgreement(), nameFilterContract(), noIssueNumber()
    
    OBJECTS i = Issue
    PROPERTIES (i) READONLY number, dateTimeCreated, estimatedHours, nameAuthor, nameAssignedTo, nameTracker, nameStatus, name
    PROPERTIES hours(i, df, dt) AFTER estimatedHours(i)
    ORDERS number(i)
    FILTERS customer(i) == c, timeEntries(i, df, dt),
            (withoutAgreements() AND NOT agreement(i)) OR NOT withoutAgreements() OR filterAgreement() OR filterContract(),
            project(i) == filterProject(c) OR NOT filterProject(c),
            agreement(i) == filterAgreement() OR NOT filterAgreement(),
            contract(i) == filterContract() OR NOT filterContract()
    
    OBJECTS t = TimeEntry
    PROPERTIES (t) READONLY nameEmployee, date, hours, nameActivity, commentsString, hoursResult
    ORDERS date(t)
    FILTERS issue(t) == i, date(t) >= df AND date(t) <= dt AND inReport(t) AND hoursResult(t) > 0.00  
    
    OBJECTS te = TimeEntry
    PROPERTIES (te) READONLY nameEmployee, date, hours, nameActivity, commentsString, hoursResult
    ORDERS date(te)
    FILTERS (customer(te) == c OR customer(project(te)) == c) AND NOT issue(te), date(te) >= df AND date(te) <= dt, 
            project(te) == filterProject(c) OR NOT filterProject(c), te IS TimeEntry AND NOT filterAgreement() AND 
            NOT filterContract() AND inReport(te) AND hoursResult(te) > 0.00
;

printCustomerReportExt 'Расш. отчет' (Customer c, DATE df, DATE dt) {
    filterAgreement()       <- NULL;
    filterContract()        <- NULL;
    inReport(TimeEntry t)   <- NULL;
    FOR [FILTER customerTimeDashboard.t](TimeEntry t2) DO inReport(t2) <- TRUE;
    IF NOT hoursFilterProjectExt(c,df,dt) THEN {
        MESSAGE 'Нет данных для отображения\n' + 'Попробуйте изменить условие фильтра';
        RETURN;
    }
    PRINT customerReportExt OBJECTS c = c, df = df, dt = dt XLS;
}


// --- отмеченное время ---
EXTEND FORM customerTimeDashboard
    PROPERTIES(t)   in BEFORE id(t)
//    PROPERTIES(t)   inReport BEFORE in(t) // отладка, см. выше
    PROPERTIES(t)   READONLY nameStatusIssue, descriptionStringIssue, dateToIssue, dateTimeCreatedIssue, dateTimeUpdatedIssue, dateFromIssue,  
                    doneRatioIssue, estimatedHoursIssue, nameAuthorIssue, nameAssignedToIssue, nameTrackerIssue,  
                    numberAgreementIssue, nameAgreementIssue, numberContractIssue, nameContractIssue,
                    priorityNameIssue, separateContractIssue
    PROPERTIES      printCustomerReportExt(c, df, dt),  // отчет 
                    nameFilterTracker(), noError(), noSeparateContract(), noIssueNumber()
    PROPERTIES(t)   PANEL commentStringIssue
    FILTERS  chkFilters(t)
    EVENTS ON INIT {
        noError() <- TRUE; 
        noSeparateContract() <- TRUE;
    }  
;

DESIGN customerTimeDashboard {
    timeEntries {
        report {
            PROPERTY(printCustomerReport(c, df, dt)) {caption = 'Отчет';};
        }
        NEW reportExt AFTER report {
            caption = 'Дополнительные параметры';
            horizontal = TRUE; // type = CONTAINERH; 
            MOVE PROPERTY (printCustomerReportExt(c, df, dt));
            MOVE PROPERTY (nameFilterTracker()) {marginRight = 10;}
            MOVE PROPERTY (noError()){marginRight = 10;}
            MOVE PROPERTY (noSeparateContract()) {marginRight = 10;} 
            MOVE PROPERTY (noIssueNumber()) {marginRight = 10;}
        }
        NEW tabloTimeEntries AFTER reportExt {
            MOVE PROPERTY (commentStringIssue(t)) {background=#EEF7F7; charWidth = 150;};
        }
        GRID(t) {
            PROPERTY (in(t)) {marginLeft = 20;marginRight = 20;} // 25.11.20 MOVE PROPERTY
            PROPERTY (numberIssue(t)) ;
            PROPERTY (nameEmployee(t)) {caption = 'Исполнитель';}
        } 
    }
    PROPERTY (withoutAgreements()) {marginLeft = 10;}
}

// часы для выставления клиенту: если присутствует оцененное время, то считаем от него, иначе по фактическому 
calcHours 'Итого' (Issue i) = 
         IF estimatedHours(i) THEN estimatedHours(i) - IF discountHours(i) THEN discountHours(i) ELSE 0.00 ELSE 
         IF hours(i) THEN hours(i) - IF discountHours(i) THEN discountHours(i) ELSE 0.00; 
descriptionStringTablo 'Описание' (Issue is) = descriptionString(is);

// маркер для отчета, что считали по оценненному времени
marker 'Маркер' (Issue i) = IF estimatedHours(i) THEN '"' ELSE ' ';  

inReportIssue '' = DATA LOCAL BOOLEAN (Issue);
noErrorIssue 'Без ошибок' = DATA LOCAL BOOLEAN ();
noSeparateContractIssue 'Без отд. договора' = DATA LOCAL BOOLEAN ();
noAgreement 'Без соглашения'  = DATA LOCAL BOOLEAN ();
lenDescription 'Ширина' = DATA LOCAL INTEGER ();
addDescription '+ Описание' = DATA LOCAL BOOLEAN ();
descriptionLimit 'LEFT' (Issue is) = left(descriptionString(is),lenDescription()); // что бы облегчить жизнь в JR

// печатная форма
FORM printIssueRepExt ''
    OBJECTS cd = (c = Customer, df = DATE, dt = DATE, st = IssueStatus) PANEL
    PROPERTIES 'Клиент' = name(c) SELECTOR, 
        'Дата с' = VALUE (df), 'Дата по' =  VALUE (dt), 'Статус' = name(st), 'Длина' = lenDescription(), '+' = addDescription() 
    OBJECTS is = Issue
    PROPERTIES(is) number, dateTimeCreated, dateTimeUpdated, name, calcHours, 
                   nameAuthor, nameAssignedTo, descriptionString, descriptionLimit, marker
    FILTERS customer(is) == c, status(is) == st
    FILTERS IF noErrorIssue() THEN NOT nameTracker(is) = 'Ошибка' ELSE TRUE                 // без ошибок
    FILTERS IF noSeparateContractIssue() THEN NOT separateContract(is) ELSE TRUE            // отдельный договор
    FILTERS IF noAgreement() THEN                                                           // без соглашения 
        (IF NOT numberAgreement(is) THEN TRUE) ELSE (IF numberAgreement(is) THEN TRUE)
    FILTERS inReportIssue(is)
    ORDERS number(is)     
;

onPrintIssueExt 'Печать' (Customer c, DATE df, DATE dt, IssueStatus st) {
    inReportIssue(is) <- NULL;
    FOR [FILTER customerTimeDashboard.is](Issue i) DO inReportIssue(i) <- TRUE; 
    PRINT printIssueRepExt OBJECTS c = c, df = df, dt = dt, st = st XLS;
}


attentionText '' = DATA STRING[50] () CHARWIDTH 50;

EXTEND FORM customerTimeDashboard
    PROPERTIES(is)  PANEL READONLY descriptionStringTablo
    PROPERTIES(c)   PANEL READONLY clientType, clientTypeInfo
    PROPERTIES(is)  READONLY nameStatus, priorityName, separateContract, calcHours
    PROPERTIES  noErrorIssue(), noSeparateContractIssue(), noAgreement(), addDescription(), lenDescription() 
    PROPERTIES  onPrintIssueExt(c, df, dt, st)
    PROPERTIES      READONLY attentionText() 
    PROPERTIES  onOpenHelp() TOOLBAR        
    EVENTS ON INIT {
        noErrorIssue() <- TRUE; 
        noSeparateContractIssue() <- TRUE;
        noAgreement() <- TRUE;
        lenDescription() <- 100;
        addDescription() <- NULL;
        attentionText() <- 'Внимание: фильтры влияют на содержание формы';
    }                       
;

DESIGN customerTimeDashboard {
    issues {
        NEW filterIssue AFTER docReport {
            horizontal = TRUE; // type = CONTAINERH;
            caption = 'Отчет по задачам';
            MOVE PROPERTY (onPrintIssueExt(c, df, dt, st));
            MOVE PROPERTY (noErrorIssue()) {marginLeft = 10;};
            MOVE PROPERTY (noSeparateContractIssue()) {marginLeft = 10;};
            MOVE PROPERTY (noAgreement()) {marginLeft = 10;};
            MOVE PROPERTY (addDescription()) {marginLeft = 10;};
            MOVE PROPERTY (lenDescription()) {marginLeft = 10;};
        }
        NEW tabloIssues AFTER filterIssue {
            // type = CONTAINERV;
            MOVE PROPERTY (descriptionStringTablo(is)) {background=#EEF7F7; charWidth = 150;};
            MOVE PROPERTY (noteManager(is))  {background=#EEF7F7; charWidth = 150;};
        }
    }
    BOX(is) {
        PROPERTY (hours(is)) {caption = 'Часы';}                                                                            // 25.11.20 MOVE PROPERTY 
        PROPERTY (number(is)) {caption = 'Номер задачи';}
        PROPERTY (name(is)) {caption = 'Задача';}
        PROPERTY (dateTo(is)) {caption = 'Завершена'; charWidth = 8;}
        PROPERTY (dateTimeCreated(is)) {caption = 'Создана'; charWidth = 8; pattern = 'dd.MM.yy';}
        PROPERTY (dateTimeUpdated(is)) {caption = 'Обновлена'; pattern = 'dd.MM.yy'; charWidth = 10; pattern = 'dd.MM.yy';}
        PROPERTY (dateFrom(is)) {caption = 'Начата'; charWidth = 8;}
    }
    TOOLBARRIGHT(is) {
        MOVE PROPERTY (open(is)) {caption = 'Redmine';}; 
    }
    TOOLBARRIGHT(t) {
        MOVE PROPERTY (attentionText());
    } 
    head {
        caption = '';
        NEW head1 {
            caption = 'Фильтры';
            MOVE PROPERTY (year);
            MOVE PROPERTY (month) {charWidth=14;}
        }
        NEW head2 AFTER  head1 {
            caption = 'Тип клиента и его расшифровка';
            MOVE PROPERTY (clientType(c)) ; 
            MOVE PROPERTY (clientTypeInfo(c)) {caption=''; charHeight=3; charWidth=120;}
        }
    }
}

chkLuxsoft (STRING url) = isISubstring(url,'luxsoft'); 

openRedmine '' (Issue i) {
    IF NOT number(i) THEN { MESSAGE 'Задача не определена'; RETURN ; }
    IF chkLuxsoft(url(external(i))) THEN {
        open(i);   
    } ELSE {
        open(LINK(url(external(i)) + '/issues/' + number(i)));    
    }
}


openRedmineTimeEntry 'Redmine' (TimeEntry t) { openRedmine(issue(t)); } TOOLBAR; 
openRedmineIssue 'Redmine' (Issue i) { openRedmine(i); } TOOLBAR ;

externalNameTimeEntry 'Источник' (TimeEntry o) = name(external(o));
externalNameIssue 'Источник' (Issue o) = name(external(o));

EXTEND FORM customerTimeDashboard
    PROPERTIES (t) READONLY externalNameTimeEntry
    PROPERTIES (is) READONLY externalNameIssue
    PROPERTIES openRedmineTimeEntry(t), openRedmineIssue(is) 
;


DESIGN customerTimeDashboard {
    PROPERTY (openRedmineTimeEntry(t)) {background = #D7FFD7;}
    PROPERTY (openRedmineIssue(is))  {background = #D7FFD7;}
}

// ======================================================================
// Отчет по проектам

inCheck 'Отм' = DATA LOCAL BOOLEAN (Project);
EXTEND FORM dialogProjects PROPERTIES (o) inCheck FIRST;

chkValue (Project p,Customer c,DATE d1,d2) = GROUP MAX TimeEntry t IF customer(t) = c AND project(t) = p AND date(t) >=d1 AND date(t) <=d2;
chkProject(TimeEntry t,Customer c) = GROUP MAX Project p IF inCheck(p) AND project(t) = p AND customer(p) = c; 
checkingValue (Customer c,TimeEntry t,DATE d1,d2) =
    date(t) >= d1 AND date(t) <= d2 AND (customer(t) == c OR customer(project(t)) == c OR customer(issue(t)) == c) AND
    (IF filterProject(c) THEN project(t) = chkProject(t,c) ELSE TRUE) AND
    (agreement(issue(t)) == filterAgreement() OR NOT filterAgreement()) AND
    (contract(issue(t)) == filterContract() OR NOT filterContract()) AND
    ((withoutAgreements() AND NOT agreement(issue(t))) OR NOT withoutAgreements() OR filterAgreement() OR filterContract()) AND
    chkFilters(t);

hoursFilterProjectExt2 'Трудозатраты' (Customer c, DATE  df, DATE dt) = GROUP SUM hoursResult(TimeEntry t) IF checkingValue(c,t,df,dt);
hoursProject 'Часы по проекту' (Project p,Customer c, DATE  df, DATE dt) = 
    GROUP SUM hoursResult(TimeEntry t) IF project(t) = p AND checkingValue(c,t,df,dt);


FORM customerReportExt2 'Отчет по проектам'
    OBJECTS cd = (c = Customer, df = DATE, dt = DATE) PANEL SUBREPORT
    PROPERTIES 'Клиент' = name(c) SELECTOR, 'Дата с' = VALUE (df), 'Дата по' =  VALUE (dt), 
                hoursFilterProjectExt2(c, df, dt), withoutAgreements(),
                nameFilterProject(c), nameFilterAgreement(), nameFilterContract(), noIssueNumber()
    
    OBJECTS p = Project
    PROPERTIES (p) READONLY name
    PROPERTIES READONLY hoursProject(p,c,df,dt)
    FILTERS chkValue(p,c,df,dt) // только существующие проекты, по которым есть часы
    FILTERS IF filterProject(c) THEN inCheck(p) ELSE TRUE // если выбраны отдельные проекты
    FILTERS hoursProject(p,c,df,dt) 
    ORDERS name(p)
    
    OBJECTS i = Issue
    PROPERTIES (i) READONLY number, dateTimeCreated, estimatedHours, nameAuthor, nameAssignedTo, nameTracker, nameStatus, name
    PROPERTIES hours(i, df, dt) AFTER estimatedHours(i)
    ORDERS number(i)
    FILTERS customer(i) == c, timeEntries(i, df, dt),
        (withoutAgreements() AND NOT agreement(i)) OR NOT withoutAgreements() OR filterAgreement() OR filterContract(),
        agreement(i) == filterAgreement() OR NOT filterAgreement(),
        contract(i) == filterContract() OR NOT filterContract()
    FILTERS project(i) = p

    OBJECTS t = TimeEntry
    PROPERTIES (t) READONLY nameEmployee, date, hours, nameActivity, commentsString, hoursResult
    ORDERS date(t)
    FILTERS issue(t) == i, date(t) >= df AND date(t) <= dt AND inReport(t) AND hoursResult(t) > 0.00

    OBJECTS te = TimeEntry
    PROPERTIES (te) READONLY nameEmployee, date, hours, nameActivity, commentsString, hoursResult
    ORDERS date(te)
    FILTERS (customer(te) == c OR customer(project(te)) == c) AND NOT issue(te), date(te) >= df AND date(te) <= dt,
        te IS TimeEntry AND NOT filterAgreement() AND
        NOT filterContract() AND inReport(te) AND hoursResult(te) > 0.00
    FILTERS project(te) = p
;


printCustomerReportExt2 'Отчет по проектам' (Customer c, DATE df, DATE dt) {
    filterAgreement()       <- NULL;
    filterContract()        <- NULL;
    inReport(TimeEntry t)   <- NULL;
    FOR (TimeEntry t IS TimeEntry) AND checkingValue(c,t,df,dt) DO inReport(t) <- TRUE; 
    PRINT customerReportExt2 OBJECTS c = c, df = df, dt = dt XLS;
}



EXTEND FORM customerTimeDashboard
    PROPERTIES printCustomerReportExt2(c, df, dt)  // отчет
//    PROPERTIES(t) EDIT // отладка 
;

DESIGN customerTimeDashboard {
    reportExt {
        MOVE PROPERTY (printCustomerReportExt2(c, df, dt)); 
    }
}