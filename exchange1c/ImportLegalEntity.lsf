MODULE ImportLegalEntity;

REQUIRE LegalEntityBy, Payment, Expense, Utils, Time;

NAMESPACE ExchangeOneC;

CLASS DataGuid 'GUID справочников';
legalEntity 'ID организаций'        = DATA LegalEntity (DataGuid);
bank 'ID банка'              = DATA Bank (DataGuid);
account 'ID расчетного счета'   = DATA Account (DataGuid);
address 'ID адреса'             = DATA Address (DataGuid);
guid 'GUID'                  = DATA STRING[36] (DataGuid);      

getGuidLegalEntity  'GUID организации' (LegalEntity l) = GROUP MAX (DataGuid d) IF legalEntity(d) = l; 
getGuidBank         'GUID банка' (Bank b) = GROUP MAX (DataGuid d) IF bank(d) = b;
getGuidAccount      'GUID счета' (Account a) = GROUP MAX (DataGuid d) IF account(d) = a;

over 'Замена NULL на строку' (STRING cstr) = OVERRIDE cstr, '';

cxml        'Контрагенты'           = DATA LOCAL TEXT ();
axml        'Расчетный счет'        = DATA LOCAL TEXT ();
bxml        'Банки'                 = DATA LOCAL TEXT ();
dxml        'Адрес контрагента'     = DATA LOCAL TEXT ();
aref        'Ссылка на осн. р/c'    = DATA LOCAL STRING[36] ();
bref        'Ссылка на банк'        = DATA LOCAL STRING[36] ();
constId     'Пустая ссылка'         = DATA LOCAL STRING[36] ();
constDt     'Пустая дата'           = DATA LOCAL STRING[19] ();
constIB     'Другая Инфор.База'     = DATA LOCAL STRING ();
startYear   'Год начала импорта'    = DATA LOCAL INTEGER ();

getIB 'Код в другой инф. базу' (STRING cstr) = '<v8:КодВоВнешнейИБ>' + (OVERRIDE cstr, constIB()) + '</v8:КодВоВнешнейИБ>\r\n';

// предопределенные GUID из 1С, значение получают из выгрузки: КонтактнаяИнформация (Регистры сведений)
cntG1C      'Страна Беларусь'       = DATA LOCAL STRING[36] ();
bynG1C      'Белорусский рубль'     = DATA LOCAL STRING[36] ();
rurG1C      'Российский рубль'      = DATA LOCAL STRING[36] ();
dolG1C      'Доллар США'            = DATA LOCAL STRING[36] ();
evroG1C     'Евро'                  = DATA LOCAL STRING[36] ();
addressG1C  'Адрес контрагента'     = DATA LOCAL STRING[36] ();
emailG1C    'Email контрагента'     = DATA LOCAL STRING[36] ();     
siteG1C     'WEB сайт контрагента'  = DATA LOCAL STRING[36] ();     
phoneG1C    'Телефон контрагента'   = DATA LOCAL STRING[36] ();     

FORM exp1c 'Реквизиты эксорта'
    OBJECTS cnt = STRING[36] PANEL, sy = INTEGER PANEL, 
            byn = STRING[36] PANEL, rur = STRING[36] PANEL, dol = STRING[36] PANEL, evro = STRING[36] PANEL, 
            address = STRING[36] PANEL, email = STRING[36] PANEL, site = STRING[36] PANEL, phone = STRING[36] PANEL
    PROPERTIES sy = startYear()         
    PROPERTIES cnt = cntG1C()
    PROPERTIES byn = bynG1C(), rur = rurG1C(), dol = dolG1C(), evro = evroG1C()
    PROPERTIES address = addressG1C(), email = emailG1C(), phone = phoneG1C(), site = siteG1C()
;

DESIGN exp1c {
    OBJECTS {
        NEW cnt {
            fill=1;
            caption = ' Значение ссылок 1С (guid) на предопределенные значения ';
            NEW cnt1 {
                MOVE PROPERTY (cnt) {width=400;};    
            }
            NEW cnt2 {
                caption = ' валюты ';
                MOVE PROPERTY (byn) {width=400;}
                MOVE PROPERTY (rur) {width=400;}
                MOVE PROPERTY (dol) {width=400;}
                MOVE PROPERTY (evro) {width=400;}
            }
            NEW cnt3 {
                caption = ' контактаная информация контрагента ';
                width = 600;
                MOVE PROPERTY (address) {width=400;}
                MOVE PROPERTY (email)   {width=400;}
                MOVE PROPERTY (phone)   {width=400;}                                      
                MOVE PROPERTY (site)    {width=400;}
            }
        }
    }   
}


onAddGuid '' () {
//    DELETE DataGuid d WHERE d IS DataGuid;
    LOCAL apl = BOOLEAN ();
    FOR (LegalEntity l IS LegalEntity) AND NOT getGuidLegalEntity(l) DO NEW o = DataGuid {
        legalEntity(o) <- l;
        generateUUID();
        guid(o) <- STRING[36](generatedUUID());
        apl() <- TRUE ;
    }
    FOR (Bank b IS Bank) AND NOT getGuidBank(b) DO NEW o = DataGuid {
        bank(o) <- b;
        generateUUID();
        guid(o) <- STRING[36](generatedUUID());
        apl() <- TRUE ;
    } 
    FOR (Account a IS Account) AND NOT getGuidAccount(a) DO NEW o = DataGuid {
        account(o) <- a;
        generateUUID();
        guid(o) <- STRING[36](generatedUUID());
        apl() <- TRUE ;
    }
    IF apl() THEN APPLY ;  
}

onAddBank 'Добавление банка' (Bank b) {
    bref() <- constId();
    IF NOT b THEN RETURN; 
    bxml() <- bxml() + '<v8:CatalogObject.Банки>\r\n';
    bxml() <- bxml() + '<v8:IsFolder>false</v8:IsFolder>\r\n';
    bxml() <- bxml() + '<v8:Ref xsi:type="v8:CatalogRef.Банки">' + guid(getGuidBank(b)) + '</v8:Ref>\r\n';
    bref() <- guid(getGuidBank(b));
    bxml() <- bxml() + '<v8:DeletionMark>false</v8:DeletionMark>\r\n';
    bxml() <- bxml() + '<v8:Parent xsi:type="v8:CatalogRef.Банки">' + constId() + '</v8:Parent>\r\n';
    bxml() <- bxml() + '<v8:Code>' + over(number(b)) + '</v8:Code>\r\n';
    bxml() <- bxml() + '<v8:Description>' + over(name(b)) + '</v8:Description>\r\n';
    bxml() <- bxml() + '<v8:АдресБанка>' + over(address(b)) + '</v8:АдресБанка>\r\n';
    bxml() <- bxml() + '<v8:МФО>' + over(number(b)) + '</v8:МФО>\r\n';
    bxml() <- bxml() + '<v8:КоррСчет xsi:type="v8:CatalogRef.КоррСчетаБанков">' + constId() + '</v8:КоррСчет>\r\n';
    bxml() <- bxml() + '<v8:РезидентРБ>true</v8:РезидентРБ>\r\n';
    bxml() <- bxml() + '<v8:Примечание/>\r\n';
    bxml() <- bxml() + '<v8:SWIFT/>\r\n';
    bxml() <- bxml() + getIB(id(b));
    bxml() <- bxml() + '<v8:Телефоны/>\r\n';
    bxml() <- bxml() + '<v8:УНП/>\r\n';
    bxml() <- bxml() + '<v8:НаименованиеБанкаНаИностранном/>\r\n';
    bxml() <- bxml() + '<v8:АдресБанкаНаИностранном/>\r\n';
    bxml() <- bxml() + '<v8:Страна xsi:type="v8:CatalogRef.Страны">' + cntG1C() + '</v8:Страна>\r\n';
    bxml() <- bxml() + '<v8:ЦБУ/>\r\n';
    bxml() <- bxml() + '<v8:БИК2017/>\r\n';
    bxml() <- bxml() + '<v8:МаскаФормированияСчетаIBAN/>\r\n';
    bxml() <- bxml() + '<v8:ГородБанка/>\r\n';
    bxml() <- bxml() + '<v8:НомерОтделения/>\r\n';
    bxml() <- bxml() + '<v8:ID_1C>0</v8:ID_1C>\r\n';
    bxml() <- bxml() + '<v8:ФлагНаПоддержке>false</v8:ФлагНаПоддержке>\r\n';
    bxml() <- bxml() + '</v8:CatalogObject.Банки>\r\n';
}

onAddAccount 'Добавление расчетного счета' (LegalEntity l) {
    aref() <- constId();
    LOCAL idValuta = STRING[36] ();
    FOR (Account a IS Account) AND legalEntity(a) = l DO {
        axml() <- axml() + '<v8:CatalogObject.РасчетныеСчета>\r\n';
        axml() <- axml() + '<v8:IsFolder>false</v8:IsFolder>\r\n';
        axml() <- axml() + '<v8:Ref xsi:type="v8:CatalogRef.РасчетныеСчета">' + guid(getGuidAccount(a)) + '</v8:Ref>\r\n';
        IF equals(l, a) THEN aref() <- guid(getGuidAccount(a));
        axml() <- axml() + '<v8:DeletionMark>false</v8:DeletionMark>\r\n';
        axml() <- axml() + '<v8:Owner xsi:type="v8:CatalogRef.Контрагенты">' + guid(getGuidLegalEntity(l)) + '</v8:Owner>\r\n';
        axml() <- axml() + '<v8:Parent xsi:type="v8:CatalogRef.РасчетныеСчета">' + constId() +'</v8:Parent>\r\n';
        axml() <- axml() + '<v8:Code/>\r\n';
        axml() <- axml() + '<v8:Description>' + over(nameCurrency(a)) + '</v8:Description>\r\n';
        axml() <- axml() + '<v8:Номер>' + over(number(a)) + '</v8:Номер>\r\n'; 
        onAddBank(bank(a)); 
        axml() <- axml() + '<v8:Банк xsi:type="v8:CatalogRef.Банки">' + bref() + '</v8:Банк>\r\n'; 
        axml() <- axml() + '<v8:Счет xsi:type="v8:ChartOfAccountsRef.Основной">' + constId() + '</v8:Счет>\r\n';
        idValuta() <- constId(); // типы валют
        IF isSubstring(nameCurrency(a),'Бел')       THEN idValuta() <- OVERRIDE bynG1C(),  constId();
        ELSE IF isSubstring(nameCurrency(a),'Рос')  THEN idValuta() <- OVERRIDE rurG1C(),  constId();
        ELSE IF isSubstring(nameCurrency(a),'Дол')  THEN idValuta() <- OVERRIDE dolG1C(),  constId();
        ELSE IF isSubstring(nameCurrency(a),'Evro') THEN idValuta() <- OVERRIDE evroG1C(), constId();  
        axml() <- axml() + '<v8:Валюта xsi:type="v8:CatalogRef.Валюты">' + idValuta() + '</v8:Валюта>\r\n';
        axml() <- axml() + '<v8:ПредставлениеОбъекта>' + over(nameCurrency(a)) + '</v8:ПредставлениеОбъекта>\r\n';
        axml() <- axml() + getIB(NULL);
        axml() <- axml() + '<v8:СчетIBAN/>\r\n';
        axml() <- axml() + '<v8:СтарыйНомер/>\r\n';
        axml() <- axml() + '<v8:ФлагНедействующий>false</v8:ФлагНедействующий>\r\n';
        axml() <- axml() + '</v8:CatalogObject.РасчетныеСчета>\r\n';   
    }
}

onAddContact 'Добавление контактной информации' (LegalEntity l,STRING ctype, guid1c, cvalue, coment) {
   	dxml() <- dxml() + '<v8:InformationRegisterRecordSet.КонтактнаяИнформация>\r\n';
    dxml() <- dxml() + '<v8:Filter>\r\n';
    dxml() <- dxml() + '<FilterItem xmlns="http://v8.1c.ru/8.1/data/enterprise">\r\n';
    dxml() <- dxml() + '<Name xsi:type="xs:string">Объект</Name>\r\n';
    dxml() <- dxml() + '<Value xsi:type="v8:CatalogRef.Контрагенты">' + guid(getGuidLegalEntity(l)) + '</Value>\r\n';
    dxml() <- dxml() + '</FilterItem>\r\n';
    dxml() <- dxml() + '<FilterItem xmlns="http://v8.1c.ru/8.1/data/enterprise">\r\n';
    dxml() <- dxml() + '<Name xsi:type="xs:string">Тип</Name>\r\n';
    dxml() <- dxml() + '<Value xsi:type="v8:EnumRef.ТипыКонтактнойИнформации">' + ctype + '</Value>\r\n';
    dxml() <- dxml() + '</FilterItem>\r\n';
    dxml() <- dxml() + '<FilterItem xmlns="http://v8.1c.ru/8.1/data/enterprise">\r\n';
    dxml() <- dxml() + '<Name xsi:type="xs:string">Вид</Name>\r\n';
    dxml() <- dxml() + '<Value xsi:type="v8:CatalogRef.ВидыКонтактнойИнформации">' + guid1c + '</Value>\r\n';
    dxml() <- dxml() + '</FilterItem>\r\n';
    dxml() <- dxml() + '</v8:Filter>\r\n';
    dxml() <- dxml() + '<v8:Record>\r\n';
    dxml() <- dxml() + '<v8:Объект xsi:type="v8:CatalogRef.Контрагенты">' + guid(getGuidLegalEntity(l)) + '</v8:Объект>\r\n';
    dxml() <- dxml() + '<v8:Тип>' + ctype + '</v8:Тип>\r\n';
    dxml() <- dxml() + '<v8:Вид xsi:type="v8:CatalogRef.ВидыКонтактнойИнформации">' + guid1c + '</v8:Вид>\r\n';
    dxml() <- dxml() + '<v8:Представление>' + cvalue + '</v8:Представление>\r\n';
    dxml() <- dxml() + '<v8:Поле1/>\r\n<v8:Поле2/>\r\n<v8:Поле3/>\r\n<v8:Поле4/>\r\n<v8:Поле5/>\r\n<v8:Поле6/>\r\n<v8:Поле7/>\r\n' + 
                          '<v8:Поле8/>\r\n<v8:Поле9/>\r\n<v8:Поле10/>\r\n<v8:Поле11/>\r\n<v8:Поле12/>\r\n<v8:Поле13/>\r\n';
    dxml() <- dxml() + '<v8:Комментарий>' + coment + '</v8:Комментарий>\r\n';
    dxml() <- dxml() + '<v8:ТипДома/>\r\n' + '<v8:ТипКорпуса/>\r\n' + '<v8:ТипКвартиры/>\r\n';                    
    dxml() <- dxml() + '</v8:Record>\r\n';
    dxml() <- dxml() + '</v8:InformationRegisterRecordSet.КонтактнаяИнформация>\r\n';
}

onAddAddress 'Добавление адреса' (LegalEntity l) {
    IF NOT addressG1C() THEN RETURN ;
    LOCAL o = Address ();
    o() <- GROUP MAX (Address a) IF legalEntity(a) = l AND types(a) = 'Юридический';
    IF NOT o() THEN RETURN ;
    onAddContact(l, 'Адрес', addressG1C(), name(o()), 'Юридический адрес');    
}

onAddEmail 'Добавление email' (LegalEntity l) {
    IF NOT emailG1C() THEN RETURN;
    IF NOT email(customer(l)) THEN RETURN;
    onAddContact(l, 'АдресЭлектроннойПочты', emailG1C(), email(customer(l)), '* email');    
} 

onAddSite 'Добавление сайта' (LegalEntity l) {
    IF NOT siteG1C() THEN RETURN;
    IF NOT site(customer(l)) THEN RETURN;
    onAddContact(l, 'ВебСтраница', siteG1C(), site(customer(l)), '* web сайт'); 
}

onAddPhone 'Добавление телефона' (LegalEntity l) {
    IF NOT phoneG1C() THEN RETURN;
    IF NOT phone(customer(l)) THEN RETURN ;
    onAddContact(l, 'Телефон', phoneG1C(), phone(customer(l)), '* телефон');
}

onAddClient 'Добавление контрагента' (LegalEntity l) {
    onAddAddress(l); 
    onAddEmail(l); 
    onAddSite(l); 
    onAddPhone(l);        // контактная информация
    cxml() <- cxml() + '<v8:CatalogObject.Контрагенты>\r\n'; 
    cxml() <- cxml() + '<v8:IsFolder>false</v8:IsFolder>\r\n';
    cxml() <- cxml() + '<v8:Ref xsi:type="v8:CatalogRef.Контрагенты">' + guid(getGuidLegalEntity(l)) + '</v8:Ref>\r\n';
    cxml() <- cxml() + '<v8:DeletionMark>false</v8:DeletionMark>\r\n';
    cxml() <- cxml() + '<v8:Parent xsi:type="v8:CatalogRef.Контрагенты">' + constId() + '</v8:Parent>\r\n';
    cxml() <- cxml() + '<v8:Code/>\r\n';
    cxml() <- cxml() + '<v8:Description>' + over(name(l)) +'</v8:Description>\r\n';
    cxml() <- cxml() + '<v8:ВидКонтрагента>Организация</v8:ВидКонтрагента>\r\n';
    cxml() <- cxml() + '<v8:ВидТребования/>\r\n';
    cxml() <- cxml() + '<v8:ДатаВыдачиПаспорта>' + constDt() + '</v8:ДатаВыдачиПаспорта>\r\n';
    cxml() <- cxml() + '<v8:Дом/>\r\n';
    cxml() <- cxml() + '<v8:Индекс/>\r\n';
    cxml() <- cxml() + '<v8:Квартира/>\r\n';
    cxml() <- cxml() + '<v8:КемВыданПаспорт/>\r\n';
    cxml() <- cxml() + getIB(id(l));
    cxml() <- cxml() + '<v8:КодДокумента/>\r\n';
    cxml() <- cxml() + '<v8:КодОКПО>' + over(OKPO(l)) + '</v8:КодОКПО>\r\n';
    cxml() <- cxml() + '<v8:Корпус/>\r\n';
    cxml() <- cxml() + '<v8:КПП/>\r\n';
    cxml() <- cxml() + '<v8:ЛичныйНомер/>\r\n';
    cxml() <- cxml() + '<v8:Менеджер xsi:type="v8:CatalogRef.Менеджеры">' + constId() + '</v8:Менеджер>\r\n';
    cxml() <- cxml() + '<v8:МОЛ xsi:type="v8:CatalogRef.МОЛ">' + constId() + '</v8:МОЛ>\r\n';
    cxml() <- cxml() + '<v8:НаселенныйПункт/>\r\n';
    cxml() <- cxml() + '<v8:НомерПаспорта/>\r\n';
    cxml() <- cxml() + '<v8:Область/>\r\n';
    cxml() <- cxml() + '<v8:ОсновнаяЛицензия xsi:type="v8:CatalogRef.Лицензии">' + constId() + '</v8:ОсновнаяЛицензия>\r\n';
    cxml() <- cxml() + '<v8:ОсновнойДоговор xsi:type="v8:CatalogRef.Договора">' + constId() + '</v8:ОсновнойДоговор>\r\n';
    onAddAccount(l);
    cxml() <- cxml() + '<v8:ОсновнойРасчСчет xsi:type="v8:CatalogRef.РасчетныеСчета">' + aref() + '</v8:ОсновнойРасчСчет>\r\n';
    cxml() <- cxml() + '<v8:ОтсрочкаДней>0</v8:ОтсрочкаДней>\r\n';
    cxml() <- cxml() + '<v8:ПолноеНаименование>' + over(fullName(l)) + '</v8:ПолноеНаименование>\r\n';
    cxml() <- cxml() + '<v8:ПолноеНаименованиеНаИностранном/>\r\n';
    cxml() <- cxml() + '<v8:ПредставлениеОбъекта>' + over(name(l)) + '</v8:ПредставлениеОбъекта>\r\n';
    cxml() <- cxml() + '<v8:Район/>\r\n';
    cxml() <- cxml() + '<v8:РезидентРБ>true</v8:РезидентРБ>\r\n';
    cxml() <- cxml() + '<v8:СерияПаспорта/>\r\n';
    cxml() <- cxml() + '<v8:Сотрудник xsi:type="v8:CatalogRef.Сотрудники">' + constId() + '</v8:Сотрудник>\r\n';
    cxml() <- cxml() + '<v8:Страна xsi:type="v8:CatalogRef.Страны">' + cntG1C() + '</v8:Страна>\r\n';
    cxml() <- cxml() + '<v8:ТипЦены xsi:type="v8:CatalogRef.ТипыЦен">' + constId() + '</v8:ТипЦены>\r\n';
    cxml() <- cxml() + '<v8:Улица/>\r\n';
    cxml() <- cxml() + '<v8:УНП>' + over(UNP(l)) + '</v8:УНП>\r\n';
    cxml() <- cxml() + '<v8:ФлагПокупатель>false</v8:ФлагПокупатель>\r\n';
    cxml() <- cxml() + '<v8:ФлагПоставщик>false</v8:ФлагПоставщик>\r\n';
    cxml() <- cxml() + '<v8:ФормаОплаты/>\r\n';
    cxml() <- cxml() + '<v8:КодОКЮЛП/>\r\n';
    cxml() <- cxml() + '<v8:НомерСвидетельства/>\r\n';
    cxml() <- cxml() + '<v8:ДатаСвидетельства>' + constDt() + '</v8:ДатаСвидетельства>\r\n';
    cxml() <- cxml() + '<v8:КемВыданоСвидетельство/>\r\n';
    cxml() <- cxml() + '<v8:ВидДняРасчета/>\r\n';
    cxml() <- cxml() + '<v8:ДатаСверкиРасчетов>' + constDt() + '</v8:ДатаСверкиРасчетов>\r\n';
    cxml() <- cxml() + '<v8:ДатаРождения>' + constDt() + '</v8:ДатаРождения>\r\n';
    cxml() <- cxml() + '<v8:КонтрагентСПовышеннымРискомПравонарушения>false</v8:КонтрагентСПовышеннымРискомПравонарушения>\r\n';
    cxml() <- cxml() + '<v8:ФлагКрупныйПлательщик>false</v8:ФлагКрупныйПлательщик>\r\n';
    cxml() <- cxml() + '<v8:ФлагРезидентОффшорнойЗоны>false</v8:ФлагРезидентОффшорнойЗоны>\r\n';
    cxml() <- cxml() + '<v8:КодФилиала/>\r\n';
    cxml() <- cxml() + '<v8:ФлагНеПлательщикНДС>false</v8:ФлагНеПлательщикНДС>\r\n';
    cxml() <- cxml() + '<v8:ГоловнаяОрганизация xsi:type="v8:CatalogRef.Контрагенты">' + constId() + '</v8:ГоловнаяОрганизация>\r\n';
    cxml() <- cxml() + '<v8:ФлагПредставительствоИностраннойОрганизации>false</v8:ФлагПредставительствоИностраннойОрганизации>\r\n';
    cxml() <- cxml() + '<v8:СостояниеПлательщика>Действующий_1</v8:СостояниеПлательщика>\r\n';
    cxml() <- cxml() + '<v8:ФлагНеРаспределятьНДСПриЗагрузкеЭСЧФ>false</v8:ФлагНеРаспределятьНДСПриЗагрузкеЭСЧФ>\r\n';
    cxml() <- cxml() + '<v8:ФлагАнализируемаяСделка>false</v8:ФлагАнализируемаяСделка>\r\n';
    cxml() <- cxml() + '<v8:ПорядокОплаты/>\r\n';
    cxml() <- cxml() + '<v8:ФлагIDКарта>false</v8:ФлагIDКарта>\r\n';
    cxml() <- cxml() + '</v8:CatalogObject.Контрагенты>\r\n';
}

// выбираем организации, которые проходили по платежам, начиная с выбранного года
inPayment '' (LegalEntity l) = GROUP MAX (Payment p) AND legalEntity(p) = l AND extractYear(date(p)) >= startYear();
inExpense '' (LegalEntity l) = GROUP MAX (Expense e) AND legalEntity(e) = l AND extractYear(date(e)) >= startYear();
 

onImportLegalEntity 'Импорт организаций' () {
    startYear() <- extractYear(currentDate());
    SHOW exp1c DOCKED WAIT;
    constId() <- '00000000-0000-0000-0000-000000000000'; constDt() <- '0001-01-01T00:00:00'; constIB() <- '         ';
    bxml() <- '';  axml() <- ''; dxml() <- ''; cxml() <- '';
    IF NOT cntG1C() THEN cntG1C() <- constId(); 
    onAddGuid();
    LOCAL xml = TEXT ();
    xml() <- '<?xml version="1.0" encoding="UTF-8"?>\r\n';
    xml() <- xml() + '<V8Exch:_1CV8DtUD xmlns:V8Exch="http://www.1c.ru/V8/1CV8DtUD/" xmlns:core="http://v8.1c.ru/data" xmlns:v8="http://v8.1c.ru/8.1/data/enterprise/current-config" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r\n'; 
    xml() <- xml() + '<V8Exch:Data>\r\n'; 
    FOR (LegalEntity l IS LegalEntity) AND (inPayment(l) OR inExpense(l)) DO {onAddClient(l);}
    xml() <- xml() + bxml() + axml() + dxml() + cxml();        
    xml() <- xml() + '</V8Exch:Data>\r\n';     
    xml() <- xml() + '<PredefinedData/>\r\n';
    xml() <- xml() + '</V8Exch:_1CV8DtUD>';
    IF NOT xml() THEN { MESSAGE 'Данные не сформированы'; RETURN; }
    stringToFile(xml());
    open(resultFile());
}

