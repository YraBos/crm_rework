MODULE CustomerDashboardNew;

REQUIRE CustomerDashboard, Document, EmployeeNew, Utils, Time;

inSData 'Созданы с:' = DATA LOCAL DATE ();
inEData 'по:' = DATA LOCAL DATE();

onSetDateFilter '+' () {
    inSData() <- firstDayOfMonth(currentDate());
    inEData() <- currentDate();
}

onClsDateFilter 'x' () {inSData() <- NULL;}

EXTEND FORM dashboardCustomer
    EVENTS ON INIT {
        inSData() <- NULL;
        inEData() <- currentDate();
    }
    PROPERTIES() inSData,inEData,onSetDateFilter,onClsDateFilter  
    FILTERS IF inSData() AND inEData() THEN 
        toDate(dateTimeCreated(is)) >= inSData() AND toDate(dateTimeCreated(is)) <= inEData() ELSE TRUE
;

DESIGN dashboardCustomer {
    PROPERTY(dateTo(is)) {caption='Окончена';charWidth=8;}                                      // 25.11.20 MOVE PROPERTY 
    PROPERTY(dateTimeCreated(is)) {pattern = 'dd.MM.yy';caption='Создана';charWidth=8;}         // 25.11.20 MOVE PROPERTY 
    PROPERTY(dateTimeUpdated(is)) {pattern = 'dd.MM.yy';caption='Обновлена';charWidth=10;}      // 25.11.20 MOVE PROPERTY 
    PROPERTY(dateFrom(is)) {caption='Начата';charWidth=8;}                                      // 25.11.20 MOVE PROPERTY 
    PROPERTY(dateTo(ss)) {caption='Окончена';charWidth=8;}                                      
    PROPERTY(dateTimeCreated(ss)) {pattern = 'dd.MM.yy';caption='Создана';charWidth=8;}         
    PROPERTY(dateTimeUpdated(ss)) {pattern = 'dd.MM.yy';caption='Обновлена';charWidth=10;}      
    PROPERTY(dateFrom(ss)) {caption='Начата';charWidth=8;}                                      
    issues {
        MOVE BOX (is) {
            NEW dateFilter FIRST {
                horizontal = TRUE;
                MOVE PROPERTY(inSData()); 
                MOVE PROPERTY(inEData());
                MOVE PROPERTY(onSetDateFilter()); 
                MOVE PROPERTY(onClsDateFilter()); 
            }            
        }
    }
}

// вычисление даты первой оплаты
dateP1 'Предоплата (акт не выставлялся)' (Contract c) = GROUP MIN date(Payment p) IF sum(p) AND NOT act(p) BY contract(p);
dateP2 'Предоплата (акт не выставлялся)' (Agreement e) = GROUP MIN date(Payment p) IF sum(p) AND NOT act(p) BY agreement(p);
dateP3 'Оплата по акту' (Act a) = GROUP MIN date(Payment p) IF sum(p) AND act(p) BY act(p);
dateLastPaid 'Дата нач. оплат' (Debt d) = IF paid(d) THEN OVERRIDE dateP3(act(d)), dateP2(agreement(d)), dateP1(contract(d));


// вычисление суммы оплаты в USD
paid11 'Оплачено' (Agreement a) = GROUP SUM sumCurrency(Payment p) BY agreement(p) MATERIALIZED;
paid12 'Оплачено по соглашениям' (Debt d) = 
    PARTITION UNGROUP paid11 LIMIT STRICT sumCurrency(d) ORDER date(d),d BY agreement(d) MATERIALIZED; 
paid21 (Contract c) = paidCurrency(c) (-) [GROUP SUM paid12(Debt d) BY contract(d)](c);
paid22 'Оплачено по контракту без соглашений' (Debt d) = 
    PARTITION UNGROUP paid21 LIMIT STRICT (sumCurrency(d) (-) paid12(d)) IF NOT agreement(d) ORDER date(d),d BY contract(d) MATERIALIZED; 
paidCurrencyDebt 'Оплачено, USD' (Debt d) = paid12(d) (+) paid22(d);            

differenceSum 'Разница, руб.' (Debt d) = 
    IF nameContractType(d) = 'Сопровождение' OR NOT inCurrency(contract(d)) THEN sum(d) (-) paid(d); 

differenceSumUSD 'Разница, USD' (Debt d) = IF inCurrency(contract(d)) THEN sumCurrency(d) (-) paidCurrencyDebt(d); 

EXTEND FORM dashboardCustomer
    PROPERTIES(d) READONLY paidCurrencyDebt, dateLastPaid, differenceSum, differenceSumUSD
;

toDateString = FORMULA STRING[4] 'to_char(($1),\'MMDD\')';

// общая обработка дней рождения для вызова из кнопки на форме или при старте приложения
onCheckBirthday 'Поиск ДР' (BOOLEAN msgNo) {
    LOCAL ctxt = TEXT (); LOCAL dtmp = DATE (); LOCAL cdel = STRING(); LOCAL nmonth = INTEGER();
    LOCAL mdcur, ndelta = INTEGER (); 
    mdcur() <- toInteger(toDateString(currentDate()));
    cdel() <- '---------------------------------------------------';
    ndelta() <- OVERRIDE dayDelta(currentUser()), 0;
    FOR (Employee e IS Employee) AND isISubstring(nameCustomer(e),'ЛЮКССОФТ') AND 
        dateBirthday(e) AND NOT inactive(e) AND 
        mdcur() >= (toInteger(toDateString(dateBirthday(e))) - ndelta()) AND 
        mdcur() <= (toInteger(toDateString(dateBirthday(e))) + ndelta()) 
        ORDER toInteger(toDateString(dateBirthday(e))), name(e) DO {
            IF ctxt() THEN ctxt() <- ctxt() + '\n'; ELSE ctxt() <- '';
            IF NOT dtmp() = dateBirthday(e) THEN {
                dtmp() <- dateBirthday(e); 
                ctxt() <- ctxt() + cdel() + '\n';
            } 
            nmonth() <- extractMonthNumber(dateBirthday(e));
            IF      nmonth() =  1 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' января: '     + name(e);
            ELSE IF nmonth() =  2 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' февраля: '    + name(e);
            ELSE IF nmonth() =  3 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' марта: '      + name(e);
            ELSE IF nmonth() =  4 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' апреля: '     + name(e);
            ELSE IF nmonth() =  5 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' мая: '        + name(e);
            ELSE IF nmonth() =  6 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' июня: '       + name(e);
            ELSE IF nmonth() =  7 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' июля: '       + name(e);
            ELSE IF nmonth() =  8 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' августа: '    + name(e);
            ELSE IF nmonth() =  9 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' сентября: '   + name(e);
            ELSE IF nmonth() = 10 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' октября: '    + name(e);
            ELSE IF nmonth() = 11 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' ноября: '     + name(e);
            ELSE IF nmonth() = 12 THEN ctxt() <- ctxt() + extractDay(dateBirthday(e)) + ' декабря: '    + name(e);
    } 
    IF ctxt() THEN {
        ctxt() <- 'Поздравляем с днем рождения:\n' + ctxt() + '\n' + cdel();
        MESSAGE ctxt();
    } ELSE {
        IF msgNo THEN MESSAGE 'Именники не найдены';
    }
} 

// кнопка на форме
onCheckBirthday2 'Поиск ДР' () { onCheckBirthday(TRUE); }

// автоматическое отображение на форме
onClientStarted() + { 
    LOCAL e = Employee(); e() <- currentUser(); // указываем явно, что бы исключить implict usage (неявное использование)
    IF showMsgBirthdayStarted(e()) THEN onCheckBirthday(NULL); 
}

dr 'Дата рожд.' (Contact.Contact c) = dateBirthday(c);
EXTEND FORM dashboardCustomer
    PROPERTIES onCheckBirthday2() SHOWIF isISubstring(name(c),'ЛЮКССОФТ') 
    PROPERTIES(ct) READONLY dr SHOWIF isISubstring(name(c),'ЛЮКССОФТ')
;


DESIGN dashboardCustomer {
    PROPERTY(sumCurrency(d)) {caption='Сумма, USD';}
    PROPERTY(dateLastPaid(d)) {charWidth=10;} 
    PROPERTY(differenceSum(d)) {charWidth=11;} 
    TOOLBARRIGHT(ct) {
        MOVE PROPERTY (onCheckBirthday2());
    } 
}


// задача 16612, добавить фильтр
EXTEND FORM dashboardCustomer
   FILTERGROUP activeAgreement FILTER 'Активные' NOT dateClosing(ag) DEFAULT 
;

EXTEND FORM dashboardCustomer
    PROPERTIES (pm) nameType 
;
 