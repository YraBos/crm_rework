MODULE ProjectRedmineNew;

REQUIRE ProjectRedmine, IssueNew;

NAMESPACE Project;

importIssueNew 'Импорт задач' (External e) {
    NEWSESSION {
        LOCAL id = INTEGER(INTEGER);
        LOCAL subject = STRING[500] (INTEGER);
        LOCAL description = TEXT (INTEGER);
        LOCAL due_date = DATE (INTEGER);
        LOCAL created_on = DATETIME (INTEGER);
        LOCAL updated_on = DATETIME (INTEGER);
        LOCAL start_date = DATE (INTEGER);
        LOCAL done_ratio = INTEGER (INTEGER);
        LOCAL estimated_hours = NUMERIC[7,2] (INTEGER);
        LOCAL project_id = INTEGER (INTEGER);
        LOCAL author_login = STRING[1000] (INTEGER);
        LOCAL assigned_to_login = STRING[1000] (INTEGER);
        LOCAL tracker_name = STRING[100] (INTEGER);
        LOCAL status_id = INTEGER (INTEGER);
        // ---- доработки: пот отдельному договору и приоритет выполнения
        LOCAL fid       = INTEGER(INTEGER);
        LOCAL fvalue    = STRING[1](INTEGER);
        LOCAL pid       = INTEGER(INTEGER);
        LOCAL pvalue    = STRING[15](INTEGER);

        LOCAL file = FILE ();
        EXTERNAL SQL path(e) EXEC 'SELECT issues.id, subject, issues.description, due_date, issues.created_on,' +
                            'issues.updated_on, start_date, done_ratio, estimated_hours, issues.project_id, authors.login AS author_login,' + 
                            'assigned_to.login AS assigned_to_login, trackers.name AS tracker_name, issues.status_id AS status_id, ' +
                                'f.id AS fid,v.value AS fvalue,' +                      
                                'e.id AS pid, e.name AS pvalue ' +
                            'FROM issues ' + 
                    'LEFT JOIN users authors ON issues.author_id = authors.id ' +
                    'LEFT JOIN users assigned_to ON issues.assigned_to_id = assigned_to.id ' + 
                    'LEFT JOIN trackers ON issues.tracker_id = trackers.id ' + 
                        'LEFT JOIN custom_values v ON v.customized_type = \'Issue\' AND v.customized_id = issues.id ' + 
                        'LEFT JOIN custom_fields f ON v.custom_field_id = f.id ' +				
                        'LEFT JOIN enumerations e ON issues.priority_id = e.id AND e.type = \'IssuePriority\' '  
               TO file;

        IMPORT TABLE FROM file() TO id, subject, description, due_date, created_on, updated_on, start_date, done_ratio, estimated_hours, 
                                    project_id, author_login, assigned_to_login, tracker_name, status_id, 
                                    fid, fvalue, pid, pvalue;

        FOR INTEGER ii = [GROUP MIN INTEGER i BY STRING[15](id(i))](STRING[15] id) AND id != '' AND NOT issue(id, e) DO NEW s = Issue {
            id(s) <- id;
            external(s) <- e;
        }
        
        FOR Issue s = issue(STRING[15](id(INTEGER i)), e) AND id(i) DO {
            
            project(s) <- project(STRING[15](project_id(i)), e);
            name(s) <- subject(i);
            description(s) <- description(i);
            dateTo(s) <- due_date(i);
            dateTimeCreated(s) <- created_on(i);
            dateTimeUpdated(s) <- updated_on(i);
            dateFrom(s) <- start_date(i);
            doneRatio(s) <- done_ratio(i);
            estimatedHours(s) <- estimated_hours(i);
            project(s) <- project(STRING[15](project_id(i)), e);
            author(s) <- GROUP MAX CustomUser p IF login(p) == author_login(i);
            assignedTo(s) <- GROUP MAX Employee p IF login(p) == assigned_to_login(i);
            tracker(s) <- tracker(tracker_name(i));
            status(s) <- issueStatus(e, status_id(i));
            IF fid(i) THEN IF fid(i) == 3 THEN {
                separateContract(s) <- NULL; 
                IF fvalue(i) == '1' THEN separateContract(s) <- TRUE;    
            }
            priorityName(s) <- pvalue(i); 
        }

        project(TimeEntry te) <- project(issue(te)) WHERE project(te) != project(issue(te)) AND external(te) = e;
        
        FOR external(Issue s) == e AND NOT [GROUP SUM 1 IF imported(INTEGER i) BY STRING[15](id(i))](id(s)) DO {
            DELETE s;
        }
        APPLY;
    }
}


importExternalNew 'Импорт из RM' () {
    importProject(external());
    importTracker(external());
    importIssueStatus(external());
    importActivity(external());
    importIssueNew(external());     // Новая обработка, см. выше
    importTimeEntry(external());
}

EXTEND FORM migrationData PROPERTIES importExternalNew();

EXTEND FORM issues 
    PROPERTIES(o) AFTER nameProject(o) priorityName, separateContract 
; 

DESIGN issues {
    GRID(o) {
        PROPERTY (separateContract(o)) {caption = 'ОД'; charWidth = 4;} 
    } 
}

DESIGN migrationData {
    importProjectExternal {
        REMOVE PROPERTY (importExternal());
        MOVE PROPERTY (importExternalNew()) AFTER PROPERTY (nameExternal());
    }
}

